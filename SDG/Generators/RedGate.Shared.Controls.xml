<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.Shared.Controls</name>
    </assembly>
    <members>
        <member name="T:RedGate.Shared.Controls.Events.EventArg`1">
            <summary>
             <see cref="T:System.EventArgs"/> with a single <typeparamref name="T"/> Â  <see cref="P:RedGate.Shared.Controls.Events.EventArg`1.Value"/>
            </summary>
            <typeparam name="T">Type of the <see cref="P:RedGate.Shared.Controls.Events.EventArg`1.Value"/></typeparam>
        </member>
        <member name="M:RedGate.Shared.Controls.Events.EventArg`1.#ctor(`0)">
            <summary>
             See <see cref="T:RedGate.Shared.Controls.Events.EventArg`1"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.Events.EventArg`1.Value">
            <summary>
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest">
            <summary>
            A request for help typically generated by the <see cref="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor"/>.
            </summary>
            <remarks>
            This operates as an intermediary between the <see cref="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor"/> and the
            help form.  To display this help in an alternative way you may want to
            override <see cref="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DisplayRequest(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest)"/>.
            To display the help form without a help anchor see <see cref="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DisplayInteractiveHelpForm(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest)"/>
            </remarks>
            <remarks>
            When making a help request you should listen to the <see cref="E:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.HelpFormClosed"/> event in order to remember the size at which the form was closed.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest">
            <summary>
            A <see cref="T:RedGate.Shared.Controls.InteractiveHelp.HelpRequest"/> that understands the formatted help which is typically 
            HTML, but also may be rtf or plain text.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.HelpRequest">
            <summary>
            Encapsulates the requested id and the help source.  This base class can be subclassed
            to provide extra information that may come from where the help is requested from.
            </summary>
            <seealso cref="T:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest"/>
            <seealso cref="T:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest"/>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.#ctor(RedGate.Shared.Controls.InteractiveHelp.IHelpSource,System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.RequestedId">
            <summary>
            The help id of the requested help
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.HelpSource">
            <summary>
            A source that should be able to provide help for the <see cref="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.RequestedId"/>
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.Help">
            <summary>
            The <see cref="T:System.String"/> help obtained by using the provided <see cref="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.HelpSource"/> and <see cref="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.RequestedId"/>.
            This is <tt>null</tt> if <see cref="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.RequestedId"/> is not found.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.#ctor(RedGate.Shared.Controls.InteractiveHelp.IHelpSource,System.String)">
            <summary>
            The help source should be able to answer requests for the requested id, and and further 
            requests that this generates for images in the help.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.DoUriLaunched(RedGate.Shared.Controls.Utils.UriLaunchedEventArgs)">
            <summary>
            Raises <see cref="E:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.UriLaunched"/>
            </summary>
            <param name="args">This contains the uri and a handled flag, may be modified.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.ImageSourceDelegate(System.String)">
            <summary>
            A means of getting images
            </summary>
            <param name="imageID">The id of the image</param>
            <returns>An image obtained from the <see cref="P:RedGate.Shared.Controls.InteractiveHelp.HelpRequest.HelpSource"/>.</returns>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.UriLaunched">
            <summary>
            Raised when a link is clicked.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.Font">
            <summary>
             If set, provides a font for plain text.  For formatted text such as RTF or HTML this will be ignored.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.DefaultSize">
            <summary>
            Can be overridden by a size set in the Help itself.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.DefaultTitle">
            <summary>
            Can be overridden by a title set in the Help itself.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.#ctor(RedGate.Shared.Controls.InteractiveHelp.IHelpSource,System.String,System.Windows.Forms.Control,System.Drawing.Image)">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest"/>.
            Uses <see cref="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DefaultFormBackgroundColor"/>
            </summary>
            <param name="helpSource">Where to obtain the help</param>
            <param name="requestedID">The id of the help requested</param>
            <param name="control">The control that requested the help</param>
            <param name="image">The image associated with the type of help.  
            Typically this will match what is drawn on the requested control.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.#ctor(RedGate.Shared.Controls.InteractiveHelp.IHelpSource,System.String,System.Windows.Forms.Control,System.Drawing.Image,System.Drawing.Color)">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest"/>
            </summary>
            <param name="helpSource">Where to obtain the help</param>
            <param name="requestedID">The id of the help requested</param>
            <param name="control">The control that requested the help</param>
            <param name="image">The image associated with the type of help.  
            Typically this will match what is drawn on the requested control.</param>
            <param name="backColor">Overrides the default background color.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.DoHelpFormClosed(System.Drawing.Size)">
            <summary>
            Raises <see cref="E:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.HelpFormClosed"/>
            </summary>
            <param name="size">The size of the help form when it was closed.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.DoExceptionThrown(System.Exception)">
            <summary>
            Raises <see cref="E:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.ExceptionThrown"/>
            </summary>
            <param name="exception"></param>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.HelpFormClosed">
            <summary>
            Passes back the size of the help form when it is closed.
            </summary>
            <remarks>If you pass this size back in as a <see cref="P:RedGate.Shared.Controls.InteractiveHelp.FormattingHelpRequest.DefaultSize"/> it can be overridden by a size set in the Html.</remarks>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.ExceptionThrown">
            <summary>
            Raised when an exception is thrown processing the help.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.Control">
            <summary>
            The control is used for placement and parenting of the help form.
            Please note that using Control in a separate thread it was created in will cause exception.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.Image">
            <summary>
            The image associated with the type of help requested.  
            This will usually match the icon of the requested control
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.BackColor">
            <summary>
            The background color associated with the type of help requested.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.LongLivedForm">
            <summary>
             The form will not be closed if clicked elsewhere.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.ControlScreenRectangle">
            <summary>
            The screen rectangle of the <see cref="P:RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest.Control"/> to place the help form near.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ManualXmlResolver">
            <summary>
            Extends the XmlUrlResolver to provide
            -Access to entitys (e.g. dtds) from a delegate getter
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ManualXmlResolver.#ctor(System.Converter{System.String,System.IO.Stream})">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ManualXmlResolver"/>
            </summary>
            <param name="converter">returns non null value if this entity should be overrided</param>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ImageToRtfConvertor">
            <summary>
            Provides a means of encoding an <see cref="T:System.Drawing.Image"/> so it can be included in an RTF file.
            <see cref="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ImageToRtfConvertor.GetRtfForImage(System.Drawing.Image)"/>
            Note that images can look dodgy in RTF controls, in particular alpha blending is dubious.
            See <see href="http://msdn.microsoft.com/en-us/library/aa140283(office.10).aspx">the RTF spec</see> for explanation of the format.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ImageToRtfConvertor.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ImageToRtfConvertor.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ImageToRtfConvertor.GetRtfForImage(System.Drawing.Image)">
            <summary>
            </summary>
            <param name="image"></param>
            <returns>A string which can be inserted into an RTF document to show <paramref cref="!:image"/></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.ImageToRtfConvertor.ConvertToMetaFile(System.Drawing.Image)">
            <summary>
            </summary>
            <param name="sourceImage">The image to Convert</param>
            <remarks>
            Use Meta File since the control/wordpad don't seem to support PNGs, although Word does :(.
            </remarks>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource">
            <summary>
            This class represents a set of images.  It is intended to be used in the XSLT inside <see cref="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.Html2Rtf"/>.
            <see cref="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource.GetRtfImage(System.String)"/> For how to fetch the image.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource.m_ImageSource">
            <summary>
            Should return null when no image is found for the provided name.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource.#ctor(System.Converter{System.String,System.Drawing.Image})">
            <summary>
            </summary>
            <param name="imageSource"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource.GetRtfImage(System.String)">
            <summary>
            </summary>
            <param name="imageName"></param>
            <returns>A string which can be inserted into an RTF file to include an image</returns>
            <exception cref="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource.ImageNotFoundException">If the provided source returned null when asked for an image</exception>
            <exception cref="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.RtfImageSource.ImageSourceDelegateException">If the provided source threw an exception when loading an image</exception>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.DisplayFormat">
            <summary>
            Represents the types of text that can be displayed in the help form
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.DisplayFormat.HTML">
            <summary>
            HTML Text
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.DisplayFormat.RTF">
            <summary>
            RTF Text
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.DisplayFormat.Text">
            <summary>
            Raw text
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.DisplayFormat.Auto">
            <summary>
            Best guess starts with {\rtf = RTF, contains "&lt;html" and is valid XML = XHTML, otherwise Text
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.HtmlHelp.ParseHtml(System.String,System.Converter{System.String,System.Drawing.Image},System.String,System.Drawing.Size)">
            <summary>
            </summary>
            <param name="html"></param>
            <param name="source"></param>
            <param name="defaultTitle">Title to use if the html provides none.</param>
            <param name="defaultSize">Size to use if the html provides none</param>
            <remarks>Possibly should be in Html2Rtf</remarks>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.HtmlHelp.ParsedHtml">
            <remarks>Possibly should be in Html2Rtf</remarks>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource">
            <summary>
            Provides a way of getting text help or other objects required by the help based on a help id.
            </summary>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.IHelpSource.GetObject``1(System.String)">
            <summary>
            Gets the object from the source if it exists and has the right type.
            </summary>
            <typeparam name="T">The type of object wanted.</typeparam>
            <param name="id">The help id.</param>
            <returns>An object matching the <paramref name="id"/> and type <typeparamref name="T"/>.
            Or <tt>default(T)</tt> if it is not in the source or has the wrong type.</returns>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource">
            <summary>
            An <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/> that simply looks up objects in a given <see cref="T:System.Resources.ResourceManager"/>.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource.#ctor(System.Resources.ResourceManager)">
            <summary>
             See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource"/>
            </summary>
            <param name="resourceManager"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource.GetObject``1(System.String)">
            <summary>
            Gets an object from the associated <see cref="T:System.Resources.ResourceManager"/>.
            </summary>
            <typeparam name="T">Type of object expected.</typeparam>
            <param name="id">Provides the name of the resource to fetch.</param>
            <returns>The object from the resource if available and it matches <typeparamref name="T"/>, <tt>default(T)</tt>otherwise.</returns>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.TextHelp">
            <summary>
            Formatted help that is actually just plain text.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.TextHelp.Font">
            <summary>
            Can be null.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1">
            <summary>
            A pass through help source that provides a given value matching a given <see cref="P:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.HelpID"/> and <typeparam name="T"/>.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.#ctor(`0)">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1"/>
            A unique id is generated, and can be read from <see cref="P:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.HelpID"/> after construction.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.#ctor(System.String,`0)">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1"/>
            </summary>
            <param name="helpID"></param>
            <param name="value"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.GetObject``1(System.String)">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/>
            </summary>
            <typeparam name="U"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.HelpID">
            <summary>
            The id of the only object in this source
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.Value">
            <summary>
            Value retrieved on matching <see cref="P:RedGate.Shared.Controls.InteractiveHelp.SingleHelpSource`1.HelpID"/>.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager">
            <summary>
            Provides a way of composing help sources together.  Help sources can be added dynamically.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager.AddHelpSource(System.Resources.ResourceManager)">
            <summary>
            Puts a help source for the <see cref="T:System.Resources.ResourceManager"/> at the beginning of the list,
            to be searched first.
            </summary>
            <param name="manager">The <see cref="T:System.Resources.ResourceManager"/> used to make the source.</param>
            <seealso cref="M:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager.AddHelpSource(RedGate.Shared.Controls.InteractiveHelp.IHelpSource)"/>
            <seealso cref="T:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource"/>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager.AddHelpSource(RedGate.Shared.Controls.InteractiveHelp.IHelpSource)">
            <summary>
            Puts a new help source at the beginning of the list
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager.#ctor(RedGate.Shared.Controls.InteractiveHelp.IHelpSource[])">
            <summary>
            A new <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/> based on a (possibly empty) list of <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/>s.
            This source queries the sources in order, left to right.
            </summary>
            <param name="objectSources">The initial list of sources.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager.GetObject``1(System.String)">
            <summary>
            Get an object from the combined <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/>s.
            </summary>
            <typeparam name="T">The type of the requested object</typeparam>
            <param name="id">The help id to look up</param>
            <returns>The object from the first source that contains a matching object of type <typeparamref name="T"/>.
              Or <tt>default(T)</tt> if no correctly typed object can be found.</returns>
        </member>
        <member name="T:RedGate.Shared.Controls.ProgressDialog.ProgressDialogExWithErrorReporting">
            <summary>
            Progress Dialog box with Additional Error Reporting support
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.ProgressDialogEx">
             <summary>
             Progress Task dialog form, runs a series of tasks in sequential order. The user can 
             stop any of the tasks, and the whole process will be terminated.
             The tasks can be split up into a series of sub-tasks, each in turn can contain sub-tasks itself....
            
             If RunTasks is called then the Progress Dialog Box is NOT displayed the minimum time 
             
             If ShowDialog is called then the minimum display time is ignored and the dialog box is 
             displayed immediately.
            
             The helper function CreateSingleTaskedProgressDialog is useful for generating single step 
             processes.
             
             Note. Exception handler delegates should not throw exceptions
             
             To use this class:
             Create &amp; configure Dialog box
             Create &amp; configure Tasks &amp; sub-tasks
             Sets the tasks to the dialog box...
             Hook up all events eg abort, or Help .....
             Run the dialog box using RunTasks
             The call returns back OK, Cancel or Abort (if an exception happened in the worker thread.)
             </summary>
             
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.#ctor">
            <summary>
            Constructs a Progress Dialog Box
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.DoTasks">
            <summary>
            This is the main loop that does all the work. It is called entirely on a separate thread
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.SetInformationBox(System.String)">
            <summary>
            Sets the information bar that is displayed when the tasks are completed
            </summary>
            <param name="text">The text to be displayed (can be in html format)</param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.DialogStateChanging(RedGate.Shared.Utils.ProgressTasks.ProgressExecState)">
            <summary>
            This method is called everytime the Progress Dialog box changes state
            </summary>
            <param name="newState">New state of the task</param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.CanCancel">
            <summary>
            Whether the dialog should enable the cancel button in the current state.
            </summary>
            <remarks>
            In future, this could allow support for individual uncancellable tasks by
            checking the state of the current task, but that would require modifications
            to ProgressTask to support the concept of an uncancellable task.
            </remarks>
            <returns>true if cancellation should be enabled</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.SetTasks(System.Collections.Generic.IList{RedGate.Shared.Utils.ProgressTasks.ProgressTask})">
            <summary>
            Sets the tasks that are expected to be run. Once this has been set it cannot be modified.
            </summary>
            <param name="tasks">A list of available tasks</param>
            <exception cref="T:System.ArgumentException">The tasks have already been set</exception>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.OnWorkerThreadException(System.Object,RedGate.Shared.Utils.ProgressTasks.WorkerThreadExceptionEventArgs)">
            <summary>
            Called when worker thread throws an exception
            </summary>
            <param name="source"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.OnWorkerThreadFinishedEvent(System.Object,RedGate.Shared.Utils.ProgressTasks.WorkerThreadFinishedEventArgs)">
            <summary>
            Called when the WorkerThread is about too finish. (Nb. on main thread!). The Thread has been
            released back by then
            </summary>
            <param name="source"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.SetIcon(System.Drawing.Icon)">
            <summary>
            Set up the new icon. (The default Icon is taken from parent icon)
            There should be two images in the icon 16x16 (for title bar top left) and
            48x48 for the image on the right.
            </summary>
            <param name="newIcon">New Icon to use</param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.ProcessPaintMessages">
            <summary>
            This is a bodge. Because otherwise the other thread can take away too much CPU and 
            we donot initially display the dialog box nicely.....
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.RunTasks">
            <summary>
            Run tasks specified. The progress Dialog box will appear after a small wait.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.RunTasks(System.Windows.Forms.IWin32Window)">
            <summary>
            Run the tasks specified. The dialog box will appear after a small amount of time.
            </summary>
            <param name="owner">The owner of the dialog box</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.OnHelpRequested(System.Windows.Forms.HelpEventArgs)">
            <summary>
            Called when the user requests help
            </summary>
            <param name="hevent"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.CreateSingleTaskedProgressDialog(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,RedGate.Shared.Utils.ProgressTasks.ProgressTaskMethod,RedGate.Shared.Utils.ICancellable)">
            <summary>
            Helper function that creates a simple one step process. The caller can hook up events or help
            after this method has returned
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialogEx.SetAbortDetails(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Sets the abort message and the details text.
            </summary>
            <param name="htmlAbortMessage">Both Html and Non-html texts are accepted. Can be null.</param>
            <param name="abortDetails">Multi-line message to show to the user. Can be null.</param>
            <param name="doOffsetOnHighDpi">Check for shifting text based on whether we're in high dpi mode.</param>
            <param name="isHtml">Whether the details part is html</param>
        </member>
        <member name="E:RedGate.Shared.Controls.ProgressDialogEx.WorkerThreadExceptionEvent">
            <summary>
            Event Handler when Worker thread throws an exception
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.ProgressDialogEx.OKClick">
            <summary>
            Event Handler when the user clicks OK
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.ProgressDialogEx.CancelClick">
            <summary>
            This event handler is called when the user clicks on the Cancel button
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.StateOfTasks">
            <summary>
            Gets the current state of the executing task
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.HideAutoQuitOptions">
            <summary>
            Allows the suppression of the Autoquit dialog control.....
            by default it is not supressed...
            It's upto the caller to ensure that HideAutoQuitOptions is not on with AutoQuiteDialogBox
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.AutoQuitDialogBox">
            <summary>
            Sets/Gets if the user wishes to autoquit the dialog box....
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.HideMinimizeButton">
            <summary>
            Allows the suppression of the MinimizeButton.....
            by default it is not supressed...
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.DisableCloseButton">
            <summary>
            Allows the dialog close button to be disabled.
            Note that this only takes effect when the dialog is first created (it modifies the CreateParams)
            and so should be set before the dialog is shown.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.MinimumDialogDisplayTime">
            <summary>
            Sets/Gets the minumum time the Dialog box is displayed.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.MinTimeBeforeDialogIsShown">
            <summary>
            Sets/Gets the length of time before the Dialog box is displayed.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.AutoShutDownDialogTime">
            <summary>
            This is the number of milliseconds the dialog box takes to shut down when the user hit's escape 
            or the user has requested autoshut down 
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.ProgressTitle">
            <summary>
            The title of the progress dialog
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.TitleCancelled">
            <summary>
            Gets/Sets the message that is displayed on the title bar when the user has cancelled.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.TitleCancelling">
            <summary>
            Gets/Sets the message that is displayed on the title bar when the user hit has 
            attempted to cancel
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.TitleSuccess">
            <summary>
            Gets/Sets the message that is displayed on the title bar when the process has 
            successfully completed.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.TitleRunning">
            <summary>
            Gets/Sets the message that is displayed on the title bar when the process is running
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.ProgressBarControl">
            <summary>
            Gets/Sets the ProgressBarControl....
            You can either use this interface to grab hold of the underlining control or implement your own.....
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.TitleAborted">
            <summary>
            Gets/Sets the message that is displayed on the title bar when the has aborted.
            The process is aborted if the client task throws an unrecognized exception
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.CancelButtonEnabled">
            <summary>
            <para>
            Gets the enabled state of the cancel button. 
            Note that setting this to false will NOT prevent the cancel button becoming enabled when tasks run.
            </para>
            <para>If you actually want to disable cancelling, you need to use the
            <see cref="P:RedGate.Shared.Controls.ProgressDialogEx.AllowCancel">AllowCancel</see> property instead.</para>
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.AllowCancel">
            <summary>
            Indicates whether this progress dialog will allow the user to cancel running tasks (default is true)
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialogEx.ButtonPanel">
            <summary>
             Returns the bottom button panel so if needed new buttons can be added by inherited classes.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialog.ProgressDialogExWithErrorReporting.#ctor">
            <summary>
            Default text is choosen and no image is supplied!
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialog.ProgressDialogExWithErrorReporting.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Create your own constructur passing in the error message to the user!
            </summary>
            <param name="messageToReportToUser">The message to tell the user</param>
            <param name="Image">The icon to be displayed when and error can be returned back</param>
        </member>
        <member name="F:RedGate.Shared.Controls.ProgressDialog.ProgressDialogExWithErrorReporting.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialog.ProgressDialogExWithErrorReporting.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressDialog.ProgressDialogExWithErrorReporting.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.abort16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.abort24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.abort32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.cancel">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.dot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.info_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.ok">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.ProgressDialog.ProgressDialogImages.running">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.EllipseLabel">
            <summary>
            Summary description for EllipseLabel.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.EllipseLabel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.EllipseLabel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.EllipseLabel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.FormattableUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.FormattableUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.FormattableUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.FormattableUserControl.GradientMode.None">
            <summary>Specifies no gradient mode.</summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.FormattableUserControl.GradientMode.BackwardDiagonal">
            <summary>Specifies a gradient from upper right to lower left.</summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.FormattableUserControl.GradientMode.ForwardDiagonal">
            <summary>Specifies a gradient from upper left to lower right.</summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.FormattableUserControl.GradientMode.Horizontal">
            <summary>Specifies a gradient from left to right.</summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.FormattableUserControl.GradientMode.Vertical">
            <summary>Specifies a gradient from top to bottom.</summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.ClipboardUtils.GetOpenClipboardWindow">
            <summary> Retrieves the handle to the window that currently has the clipboard open.  </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.ClipboardUtils.GetWindowTextLength(System.IntPtr)">
            <summary> Retrieves the length, in characters, of the specified window's title bar text (if the window has a title bar). </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.ClipboardUtils.GetWindowText(System.IntPtr,System.Text.StringBuilder,System.Int32)">
            <summary> Copies the text of the specified window's title bar (if it has one) into a buffer. </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.ClipboardUtils.TrySetDataObject(System.Object,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Try to set the clipboard, then tell the user about failure instead of throwing an exception
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Utils.UriLaunchedEventArgs">
            <summary>
             Event args for UriLaunched event.  Typically this can be intercepted and used
             to handle the event yourself.
             <example>
             <code>
             formattingHelpRequest.UriLaunched +=
                 delegate(object sender, UriLaunchedEventArgs e)
                     {
                         if (!e.Handled)
                         {
                             if (e.Uri.Scheme == "special")
                             {
                                 //handle uri
                                 e.Handled = true;
                             }
                         }
                     };
             </code>
             </example>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.UriLaunchedEventArgs.#ctor(System.Uri)">
            <summary>
             Raised when a link is clicked.  Set the <see name="Handled"/> property to handle this yourself.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.UriLaunchedEventArgs.#ctor(System.Uri,System.Boolean)">
            <summary>
             Raised when a link is clicked.  Set the <see name="Handled"/> property to handle this yourself.
            </summary>
            <param name="uri"></param>
            <param name="handled">true if already handled</param>
        </member>
        <member name="P:RedGate.Shared.Controls.Utils.UriLaunchedEventArgs.Uri">
            <summary>
             Uri to be launched.  Set this to cause redirection.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Utils.UriLaunchedEventArgs.Handled">
            <summary>
            This should be checked to see if the url is already handled, and set if the launching
            is to be handled by the called handler.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingSystemMenu.#ctor(System.Windows.Forms.IWin32Window,RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface)">
            <summary>
            Create a new LoggingSystemMenu
            </summary>
            <param name="window">The window on which to attach the menu items in the SystemMenu</param>
            <param name="loggingUIInterface">The handler for the Logging interface</param>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingSystemMenu.AppendDefaultLoggingItemsToMenu">
            <summary>
            Add the Logging Menu Items to the SystemMenu
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.LoggingSystemMenu.LoggingSystemMenu.Menu">
            <summary>
            Get hold of the underlying menu object - further menu items can be added to this object
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface">
             <summary>
             This class that contains useful methods for integrating LoggingConfiguration to the UI
             </summary>
              /// <example>
             <code>
             private readonly LoggingSystemMenu m_LoggingSystemMenu;
             
             public MainForm()
             {
                 InitializeComponent();
            
                 m_LoggingSystemMenu = new LoggingSystemMenu(this, new LoggingUIInterface( @"Software\Red Gate\SQL Dummy 1\Logging", "SQL Dummy"));
            
                 m_LoggingSystemMenu.AppendDefaultLoggingItemsToMenu();
             
                 ...
             }
             </code>
             </example>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.#ctor(System.String,System.String)">
            <summary>
            Create a new LoggingUIInterface
            </summary>
            <param name="loggingConfigRegKey">The location in the registry of where to save/load configuration information from</param>
            <param name="productName">The name of the Product using the logging</param>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.InitLogging">
            <summary>
            Initialise Logging - initially the logging will be set to off
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.SaveCurrentLogLevelToRegistry">
            <summary>
            Serialise to the registry the current log settings
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.LoadCurrentLogLevelFromRegistry">
            <summary>
            Retrieve from the registry the current log settings
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.LogLogLevels(RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Log the current log level setting to the Logger.
            </summary>
            <param name="l">The LogLevel to log</param>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.UpdateLogLevels(RedGate.Shared.Utils.Logging.LogLevel)">
            <summary>
            Change the LogLevel that is to be logged to the Log.
            </summary>
            <param name="l">The new log level</param>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.HasLogger">
            <summary>
            Determines whether the underlying Logging object has been initialised (in this implementation this will
            be the file logger)
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.StopLogging">
            <summary>
            Stop Logging - will flush the file logger before resetting the Logger by calling Initialize
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.Flush">
            <summary>
            Flush the file logger
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.LoggingConfigurationRegKey">
            <summary>
            
            </summary>The location in the registry of where to save/load configuration information from
        </member>
        <member name="P:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.ProductName">
            <summary>
            The name of the Product using the logging
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.LogFolder">
            <summary>
            The location of the Log Files
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.LoggingSystemMenu.LoggingUIInterface.LogFileName">
            <summary>
            The file name of the current file being logged to.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.SystemMenu.SystemMenu">
             <summary>
             The SystemMenu class represents the Menu revealed from clicking on the product icon in the top-left hand
             corner. Once the Menu has been instantiated it can be treated like any normal .NET menu.
             </summary>
             <example>
             <code>
             readonly SystemMenu m_SystemMenu;
             
             public MainForm()
             {
                 InitializeComponent();
            
                 m_SystemMenu = new SystemMenu(m_Window);
            
                 m_miLogLevels = new MenuItem(String.Format(MINIMUM_LOGGING_TEXT, "No Logging"));
                 MenuItem miVerbose = new MenuItem("&amp;Verbose");
                 miVerbose.Tag =
                     new LogMenuItemData(LogLevel.Verbose | LogLevel.Trace | LogLevel.Debug | LogLevel.Information |
                                         LogLevel.Warning | LogLevel.Error | LogLevel.Fatal);
                 miVerbose.Click += miLogLevel_Click;
                 MenuItem miTrace = new MenuItem("&amp;Trace");
                 miTrace.Tag =
                     new LogMenuItemData(LogLevel.Trace | LogLevel.Debug | LogLevel.Information |
                                         LogLevel.Warning | LogLevel.Error | LogLevel.Fatal);
                 miTrace.Click += miLogLevel_Click;
                 MenuItem miDebug = new MenuItem("&amp;Debug");
                 miDebug.Tag =
                     new LogMenuItemData(LogLevel.Debug | LogLevel.Information |
                                         LogLevel.Warning | LogLevel.Error | LogLevel.Fatal);
                 miDebug.Click += miLogLevel_Click;
                 MenuItem miInformation = new MenuItem("&amp;Information");
                 miInformation.Tag =
                     new LogMenuItemData(LogLevel.Information | LogLevel.Warning | LogLevel.Error | LogLevel.Fatal);
                 miInformation.Click += miLogLevel_Click;
                 
                 m_miLogLevels.MenuItems.AddRange(new MenuItem[]
                                                    {
                                                        miVerbose, miTrace, miDebug, miInformation, 
                                                    });
                 
                 m_miLocateLogFile = new MenuItem("Locate &amp;Log Files...");
                 m_miLocateLogFile.Click += delegate
                                        {
                                          ...  
                                        };
                 m_miLocateLogFile.Enabled = false;
                 m_miCurrentLogFile = new MenuItem("&amp;Open Current Log File...");
                 m_miCurrentLogFile.Click += delegate
                                               {
                                                  ...
                                               };
                 m_miCurrentLogFile.Enabled = false;
                 
                 m_SystemMenu.MenuItems.Add("-");
                 m_SystemMenu.MenuItems.Add(m_miLogLevels);
                 m_SystemMenu.MenuItems.Add(m_miLocateLogFile);
                 m_SystemMenu.MenuItems.Add(m_miCurrentLogFile);
                 
                 m_SystemMenu.Update();
             </code>
             </example>
        </member>
        <member name="M:RedGate.Shared.Controls.SystemMenu.SystemMenu.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            Create a SystemMenuObject
            </summary>
            <param name="form">The form that you wish to retrieve the System Menu for</param>
        </member>
        <member name="M:RedGate.Shared.Controls.SystemMenu.SystemMenu.CreateMenuHandle">
            <summary>
            Instead of creating a new handle it uses the handle of the given form to retrieve
            the system menu.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.SystemMenu.SystemMenu.Update">
            <summary>
            Call this function during startup and before the main form is displayed to
            initialise the SystemMenu.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.SystemMenu.Win32SystemMenu">
            <summary>
            A class representing constants and functions drawn from the Windows API
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.AboutBox">
            <summary>
            Static functions to create an About Box
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.AboutBox.ShowAboutBoxDialog(System.Windows.Forms.Form,System.Boolean,System.String,System.String,System.Drawing.Image,System.Windows.Forms.HelpEventHandler,RedGate.Shared.Controls.UI.AboutBox.EasterEgg)">
            <summary>
            Show an about box for the product using the executing assembly and Form as the
            supplier of title,copyright,version and icon information.
            </summary>
            <param name="parent">Parent Form of this Popup and the object where the icon is retrieved from.</param>
            <param name="isActivated">true = activated license, false otherwise</param>
            <param name="serialNumber">Serial number of the product or ""/null if not activated</param>
            <param name="edition">Edition of the Product ("standard"/"professional"/"in trial"/other (will de displayed as verbatim in the dialog)</param>
            <param name="productImage">About Box image</param>
            <param name="helpEventHandler">Help Delegate for receiving help requests.</param>
            <param name="eedel">An optional delegate for showing an easter egg - can be null.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.AboutBox.ShowAboutBoxDialog(System.Windows.Forms.Form,System.Reflection.Assembly,System.Boolean,System.String,System.String,System.Drawing.Image,System.Windows.Forms.HelpEventHandler,RedGate.Shared.Controls.UI.AboutBox.EasterEgg)">
            <summary>
            Show an about box for the product retrieving as much
            as possible of the information required from the Assembly and Form.
            </summary>
            <param name="parent">Parent Form of this Popup and the object where the icon is retrieved from.</param>
            <param name="assembly">The assembly on which to retrieve the title, copyright text and version from.</param>
            <param name="isActivated">true = activated license, false otherwise</param>
            <param name="serialNumber">Serial number of the product or ""/null if not activated</param>
            <param name="edition">Edition of the Product ("standard"/"professional"/"in trial"/other (will de displayed as verbatim in the dialog)</param>
            <param name="productImage">About Box image</param>
            <param name="helpEventHandler">Help Delegate for receiving help requests.</param>
            /// <param name="eedel">An optional delegate for showing an easter egg - can be null.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.AboutBox.ShowAboutBoxDialog(System.Windows.Forms.IWin32Window,System.String,System.String,System.Version,System.Boolean,System.String,System.String,System.Drawing.Icon,System.Drawing.Image,System.Windows.Forms.HelpEventHandler,RedGate.Shared.Controls.UI.AboutBox.EasterEgg)">
            <summary>
            Show an About Box for the product.
            </summary>
            <param name="parent">Parent Window Handle of this Popup</param>
            <param name="assemblyCopyright">Copyright tag of the product</param>
            <param name="assemblyTitle">Title of the Product</param>
            <param name="productVersion">Version of the Product</param>
            <param name="isActivated">true = activated license, false otherwise</param>
            <param name="serialNumber">Serial number of the product or ""/null if not activated</param>
            <param name="edition">Edition of the Product ("standard"/"professional"/"in trial"/other (will de displayed as verbatim in the dialog)</param>
            <param name="productIcon">Product's icon</param>
            <param name="productImage">About box image</param>
            <param name="helpEventHandler">Help Delegate for receiving help requests.</param>
            <param name="eedel">An optional delegate for showing an easter egg - can be null.</param>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.AboutBox.EasterEgg">
            <summary>
            This delegate will be invoked when an Easter Egg is required
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.EasterEggForm">
            <summary>
            The common EasterEgg.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.EasterEggForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.EasterEggForm.#ctor(System.Drawing.Image,System.String,RedGate.Shared.Controls.UI.EasterEggForm.Solved)">
            <summary>
            Create a new Slider Easter Egg
            </summary>
            <param name="easterEggImage">The image to display in the slider</param>
            <param name="tagLine">A Text Description of the Image.</param>
            <param name="del">A delegate to be executed when the puzzle is solved - if none is specified a default will be used</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.EasterEggForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.EasterEggForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.EasterEggForm.Solved_">
            <summary>
            Get/set the delegate associated with solving the puzzle
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.EasterEggForm.TagLine">
            <summary>
            Get/Set the TagLine of the image
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.EasterEggForm.EasterEggImage">
            <summary>
            Get / set the Image associated with the EasterEgg
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.EasterEggForm.Solved">
            <summary>
            This delegate will be called when the puzzle is solved!
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.FadeBox">
            <summary>
            Summary description for FadeBox.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.FadeBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.FadeBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.ImageCache">
            <summary>
            This is a cache for images embedded into the main executable.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.ImageCache.s_Caches">
            <summary>
            Maps assemblies to image caches.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.ImageCache.Lookup(System.String)">
            <summary>
            Get the Image specified by the resource name (throws an exception if the image is not found)
            </summary>
            <param name="resourceName">Name of the image to get</param>
            <returns>The Image</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.ImageCache.GetImageCache(System.Reflection.Assembly)">
            <summary>
            Gets an images cache for the specified assembly.
            </summary>
            <param name="source">assembly from which images will be loaded</param>
            <returns>image cache</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.ImageCache.#ctor(System.Reflection.Assembly)">
            <summary>
            Creates a new image cache.
            </summary>
            <param name="source">assembly from which images will be loaded</param>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.ImageCache.Item(System.String)">
            <summary>
            Gets an image based on its resource name.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.RequiresProfessionalControl">
            <summary>
            Control that displays the rosette and a message when this is the standard edition of SQL Compare
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.RequiresProfessionalControl.#ctor(System.String)">
            <summary>
            Create a StandardEditionCommonControl
            </summary>
            <param name="productName">Name of the Product</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.RequiresProfessionalControl.#ctor">
            <summary>
            An empty constructor of RequiresProfessionalControl for use with the Designer
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.RequiresProfessionalControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.RequiresProfessionalControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.RequiresProfessionalControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.RequiresProfessionalControl.ProductText">
            <summary>
            Sets the Product name into the control
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.RequiresProfessionalControl.Rosette">
            <summary>
            Get the Rosette Picture Box
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.RequiresProfessionalControl.IsProfessional">
            <summary>
            Whether or not this is the professional edition of this product
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.RequiresProfessionalControl.Label">
            <summary>
            Get the Text of the Label
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.AboutBoxEdition">
            <summary>
            Enumeration of the type of edition to show in the about box
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.None">
            <summary>
            Show no edition information
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.Default">
            <summary>
            Show the default edition information
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.Trial">
            <summary>
            Show as being a Trial edition
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.Unknown">
            <summary>
            Unknown edition
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.Lite">
            <summary>
            Show as Lite Edition
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.Standard">
            <summary>
            Show as being the Standard Edition
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.Professional">
            <summary>
            Show as being a professional edition
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.AboutBoxEdition.FromLicense">
            <summary>
            Work out which edition we are from the license passed in
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.SharedProductIDControl">
            <summary>
            Displays an About Box for a product
            </summary>
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.SharedProductIDControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.SharedProductIDControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.SharedProductIDControl.ShowSplash">
            <summary>
            Display the splash screen
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.SharedProductIDControl.ProductLogo">
            <summary>
            Get the product logo
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.SharedProductIDControl.LicenceString">
            <summary>
            string representing the licence
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.UI.SharedProductIDControl.LicenseCodeEntered">
            <summary>
            Event fired whenever the user dismisses the license code dialog
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.SharedProductIDControl.Edition">
            <summary>
            The edition of this application to display in the about box
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.SharedProductIDControl.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.SharedProductIDControl.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.LineDividerGroup.LineDividerGroupBox">
            <summary>
            Represents a Window control that displays a line above a group of controls with an optional text and image.
            This inherits from group box so behaves very similarly to it.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LineDividerGroup.LineDividerGroupBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.LineDividerGroup.LineDividerGroupBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Painting method
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.LineDividerGroup.LineDividerGroupBox.Image">
            <summary>
            The image that will be displayed on the control
            </summary>        
        </member>
        <member name="P:RedGate.Shared.Controls.LineDividerGroup.LineDividerGroupBox.TextImageRelation">
            <summary>
            Specifies the relative location of the image to the text on the group 
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.LineDividerGroup.LineDividerGroupBox.TextColor">
            <summary>
            Get/Set the color used to display the divider label
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.LoadedModule">
            <summary>
            Loaded Module
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.LoadedModule.#ctor(System.Diagnostics.ProcessModule)">
            <summary>
            Create a new LoadedModule from a ProcessModule
            </summary>
            <param name="processModule"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.LoadedModule.ModuleName">
            <summary>
            ModuleName
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.LoadedModule.FileName">
            <summary>
            FileName
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.LoadedModule.ProductVersion">
            <summary>
            ProductVersion
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.LoadedModule.NativeModule">
            <summary>
            NativeModule
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.LoadedModule.DotNetVersion">
            <summary>
            DotNetVersion
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.LoadedModulesForm">
            <summary>
            Summary description for LoadedModulesForm.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.LoadedModulesForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.LoadedModulesForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.LoadedModulesForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.Slider">
            <summary>
            Summary description for Slider.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.Slider.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.Slider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.Slider.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.SplashScreen">
            <summary>
            Static functions to create a Splash Screen
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.SplashScreen.ShowSplashScreen(System.Drawing.Image,System.Drawing.Icon,System.Boolean,System.String)">
            <summary>
            Display the Splash Screen
            </summary>
            <param name="logo">The product image to use</param> 
            <param name="icon">The icon for the splash screen</param>
            <param name="isActivated">Whether the product is activated</param>
            <param name="strEdition">Edition of the Product</param>
            <returns>The Form corresponding to the splash screen, Hide and Dispose of the form when the splash screen is finished with.</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.SplashScreen.ShowSplashScreen(System.Drawing.Image,System.Drawing.Icon,System.Reflection.Assembly,System.Boolean,System.String)">
            <summary>
            Display the Splash Screen
            </summary>
            <param name="logo">The product image to use</param>
            <param name="icon">The icon for the splash screen</param>
            <param name="assembly">The assembly from which to retrieve copyright, version, name information.</param>
            <param name="isActivated">Whether the product is activated</param>
            <param name="strEdition">Edition of the Product</param>
            <returns>The Form corresponding to the splash screen, Hide and Dispose of the form when the splash screen is finished with.</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.SplashScreen.ShowSplashScreen(System.Drawing.Image,System.Drawing.Icon,System.String,System.String,System.Version,System.Boolean,System.String)">
            <summary>
            Display the Splash Screen
            </summary>
            <param name="logo">The product image to use</param>
            <param name="icon">The icon for the splash screen</param>
            <param name="assemblyName">Title of the assembly</param>
            <param name="assemblyCopyright">Copyright information of the assembly</param>
            <param name="assemblyVersion">Bersion of the assembly</param>
            <param name="isActivated">Whether the product is activated</param>
            <param name="strEdition">Edition of the Product</param>
            <returns>The Form corresponding to the splash screen, Hide and Dispose of the form when the splash screen is finished with.</returns>
        </member>
        <member name="T:RedGate.Shared.Controls.UI.StandardEditionCommonControl">
            <summary>
            Control that displays the rosette and a message when this is the standard edition of SQL Compare
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.StandardEditionCommonControl.#ctor">
            <summary>
            Create a StandardEditionCommonControl
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.UI.StandardEditionCommonControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.StandardEditionCommonControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.UI.StandardEditionCommonControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.StandardEditionCommonControl.Rosette">
            <summary>
            Get the Rosette Picture Box
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.StandardEditionCommonControl.IsProfessional">
            <summary>
            Whether or not this is the professional edition of this product
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.UI.StandardEditionCommonControl.Label">
            <summary>
            Get the Text of the Label
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Utils.DrawingUtils">
            <summary>
            Drawing Utilities
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Utils.DrawingUtils.StandardDpi">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Utils.DrawingUtils.ScreenDpi">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Utils.DrawingUtils.NeedScaling">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Utils.DrawingUtils.DpiScaleFactor">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.CentredRectangle(System.Drawing.Rectangle,System.Drawing.Size)">
            <summary>
            Calculates the centered rectangle based apon parent
            </summary>
            <param name="basis"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.CentredRectangle(System.Drawing.Rectangle,System.Drawing.Size,System.Drawing.ContentAlignment)">
            <summary>
            
            </summary>
            <param name="basis"></param>
            <param name="size"></param>
            <param name="align"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.SplitRectangleVertically(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Produces two rectangles which are the two parts of <see cref="!:rect"/> divided along x=xPos
            </summary>
            <param name="rect"></param>
            <param name="xPos"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.AddHorizontally(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Returns the a size - the sum of the widths and the maximum height
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.AddHorizontally(System.Drawing.Size[])">
            <summary>
            Returns the a size - the sum of all the widths and the maximum height
            </summary>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.AddHorizontally(System.Int32,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Creates a size that is the sum of the widths plus the margin ( when both widths are greater than 0) and the
            maximum height
            </summary>
            <param name="margin"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.AddVertically(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Returns a size the sum of the heights and the maximum width
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.AddVertically(System.Drawing.Size[])">
            <summary>
            Returns a size the sum of all the heights and the maximum width
            </summary>
            <param name="sizes"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.AddVertically(System.Int32,System.Drawing.Size,System.Drawing.Size)">
            <summary>
            Creates a size that is the sum of the heights plus the margin ( when both heights are greater than 0) and the
            maximum width
            </summary>
            <param name="margin"></param>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ColourToPArgb(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="colour"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ColourFromPArgb(System.Single[])">
            <summary>
            
            </summary>
            <param name="pargb"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.InterpolateColours(System.Drawing.Color,System.Drawing.Color,System.Single)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="lambda"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Int32)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Single)">
            <summary>
            
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Drawing.PointF)">
            <summary>
            
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Drawing.SizeF)">
            <summary>
            
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ScaleForDpi(System.Drawing.RectangleF)">
            <summary>
            
            </summary>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.ImageSizeForDpi(System.Drawing.Image)">
            <summary>
            
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.Min(System.Drawing.Size,System.Drawing.Size)">
            <summary>
            
            </summary>
            <param name="sz1"></param>
            <param name="sz2"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.SetDoubleBuffered(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the double buffered flag on the given control
            </summary>
            <param name="control"></param>
            <param name="doubleBuffer"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.DrawingUtils.SetDoubleBufferedRecursive(System.Windows.Forms.Control,System.Boolean)">
            <summary>
            Sets the double buffered flag on the given control and all child controls
            </summary>
            <param name="control"></param>
            <param name="doubleBuffer"></param>
        </member>
        <member name="T:RedGate.Shared.Controls.Utils.ImageUtils">
            <summary>
            Utility for basic image manipulation
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.ImageUtils.CreateImageWithAttribute(System.Drawing.Image,System.Drawing.Imaging.ImageAttributes)">
            <summary>
            Creates a new image with specific attributes
            </summary>
            <param name="image"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Controls.Utils.ImageUtils.DisabledColorMatrix">
            <summary>
            Gets a matrix of disabled colors
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Utils.ImageUtils.HotColorMatrix">
            <summary>
            Gets a matrix of hot colors
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Utils.ImageUtils.DisabledImageAttributes">
            <summary>
            Gets an ImageAttribute of a disabled color
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Utils.ImageUtils.HotImageAttributes">
            <summary>
            Gets an ImageAttribute of a hot color
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.Html2Rtf">
            <summary>
            Contains a helper to convert "HTML"-help-format into RTF for display.
            "HTML"-help-format is defined as xml which matches <see cref="P:RedGate.Shared.Controls.InteractiveHelp.Resources.redgate_help_v1"/>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.Html2Rtf.ConvertHtml2Rtf(System.String,System.String@,System.Drawing.Size@)">
            <summary>
            Converts the pseudo-HTML-help-format-text-thingy into RTF for display,
            </summary>
            <param name="html"></param>
            <param name="title">The title specified in the html or <see cref="F:System.String.Empty"/></param>
            <param name="dimensions">The size specified in the html or new Size( -1, -1 )</param>
            <returns></returns>     
            <exception cref="T:System.ArgumentException">
            If 
            <ul>
            <li>html is invalid </li>
            <li>html contains img tags (see <see cref="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.Html2Rtf.ConvertHtml2Rtf(System.String,System.String@,System.Drawing.Size@,System.Converter{System.String,System.Drawing.Image})"/> for the call which allows images) </li>
            </ul>
            </exception>       
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.Html2Rtf.ConvertHtml2Rtf(System.String,System.String@,System.Drawing.Size@,System.Converter{System.String,System.Drawing.Image})">
            <summary>
            Converts the pseudo-HTML-help-format-text-thingy into RTF for display,
            </summary>
            <param name="html"></param>
            <param name="title">The title specified in the html or <see cref="F:System.String.Empty"/></param>
            <param name="dimensions">The size specified in the html or new Size( -1, -1 )</param>
            <param name="imageSourceDelegate">Should return the intended image for each named image in the html</param>
            <exception cref="T:System.ArgumentException">
            If 
            <ul>
            <li>html is invalid </li>
            <li>html contains images not available via imageSourceDelegate </li>
            <li>imageSourceDelegate threw an Exception</li>
            </ul>
            </exception>    
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.ConvertHtml2Rtf.Html2Rtf.Validate(System.String)">
            <summary>
             Validates from a dtd.  This method is not available in release.
            </summary>
            <param name="html"></param>
             <exception cref="T:System.Xml.XmlException">If the <paramref name="html"/> does not validate</exception>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox">
            <summary>
            An RTF box that will display the pseudo-HTML-help-format-text-thingy
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox.#ctor">
            <summary>
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox.HTML">
            <summary>
            Sets the HTML text to be displayed
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Html2RtfBox.RichTextBox">
            <summary>
            Returns the underlying rich text box
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.FindForm">
            <summary>
            Summary description for FindForm.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.FindForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.FindForm.m_Showing">
            <summary>
            I hate this - please can we change it!
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.FindForm.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.FindForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.FindForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.FindForm.ShowFindForm">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FindForm.FindText">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FindForm.FindDown">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FindForm.CaseSensitive">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FindForm.Finds">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.FormLayout">
             <summary>
             This is a utility class for persisting the layout of forms between invocations. It saves
             the various attributes to the registry (HKCU) such as size, location, state and which screen
             it was on. It also handles screens being added and removed between runs of the application.
             
             The original code was written for SQL Data Compare 6 by Richard Mitchell, then pulled into 
             Shared Components by Robert Chipperfield.
             </summary>
             <example>
             <code>
             I've used this with a couple of helper functions...
             
             internal const string c_RegistryRoot = @"Software\Red Gate\Exchange Server Archiver 1";
             internal const string c_UIRoot = c_RegistryRoot + @"\UI";
             internal static void RetrieveFormLayout(Form form, bool includeLocation)
             {
                 FormLayout.LoadFromRegistry(c_UIRoot + "\\" + form.Name, includeLocation, form).RestoreLayout(form);
             }
             
             internal static void SetFormLayout(Form form, bool includeLocation)
             {
                 FormLayout layout = new FormLayout(form);
                 layout.PersistToRegistry(c_UIRoot + "\\" + form.Name, includeLocation);
             }
            
             // In the form constructor...
             public MainForm()
             {
                 InitializeComponent();
            
                 Options.RetrieveFormLayout(this, true);
                 ....
             
             // When the form is closing...
             private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
             {
                 // For cancellable dialogs I'd advise not stored if it's cancelled
                 // if (!e.Cancel)
                 Options.SetFormLayout(this, true);
             }
             </code>
             </example>
        </member>
        <member name="M:RedGate.Shared.Controls.FormLayout.#ctor">
            <summary>
            Not sure why there's an empty constructor
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.FormLayout.#ctor(System.Windows.Forms.Form)">
            <summary>
            Creates a form layout from the given form
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.FormLayout.PersistToRegistry(System.String,System.Boolean)">
            <summary>
            Saves the form layout to the given area of the registry (which is created if necessary).
            </summary>
            <param name="subkey">Name of the key</param>
            <param name="includeLocation">true - include screen location of form, false - don't</param>
        </member>
        <member name="M:RedGate.Shared.Controls.FormLayout.LoadFromRegistry(System.String,System.Boolean,System.Windows.Forms.Form)">
            <summary>
            Restores a form to the location/size given in the registry
            </summary>
            <param name="subkey"></param>
            <param name="includeLocation"></param>
            <param name="primaryForm"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.FormLayout.RestoreLayout(System.Windows.Forms.Form)">
            <summary>
            Restore the layout into the form
            </summary>
            <param name="form"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.FormLayout.SavedOK">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FormLayout.Location">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FormLayout.Size">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.FormLayout.WindowState">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Help.HelpSystem">
            <summary>
            Allows easy access to either CHM help or web help as appropriate
            </summary>
            <remarks>The code does assume that the DLL will not be placed in the GAC!</remarks>
            <remarks>The help system assumes that the major version is stuck on the end of the asssembly description.</remarks>
            <remarks>Can be subclassed to change behavior</remarks>
        </member>
        <member name="F:RedGate.Shared.Controls.Help.HelpSystem.LOG_COMPONENT">
            <summary>
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Help.HelpSystem.DEFAULT_HELP_PAGE">
            <summary>
            A default page for the product used by <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.ShowHelp(System.Windows.Forms.Control,System.Int64)"/>
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Help.HelpSystem.DEFAULT_HELP_PAGE_NONE">
            <summary>
            Behaves the same as <see cref="F:RedGate.Shared.Controls.Help.HelpSystem.DEFAULT_HELP_PAGE"/>.
            </summary>
            <remarks>
            This was added 
            </remarks>
            <seealso cref="F:RedGate.Shared.Controls.Help.HelpSystem.DEFAULT_HELP_PAGE"/>
        </member>
        <member name="F:RedGate.Shared.Controls.Help.HelpSystem.INTERACTIVE_HELP_URL">
            <summary>
            Prefix to numeric id.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Help.HelpSystem.s_Singleton">
            <summary>
            Changing this changes the behaviour of the public static methods on this class.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Help.HelpSystem.m_LongLivedHelpForms">
            <summary>
            Keeping track of the opened interactive help forms.
            </summary>	    
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.ShowHelp(System.Windows.Forms.Control,System.Int64)">
            <summary>
            Displays the specified help page, either as a CHM or web help
            CHM help will be displayed if a CHM file can be found, otherwise web help will be shown
            </summary>
            <param name="parent">The parent control</param>
            <param name="contextHelpId">The topic id to open (also see <see cref="F:RedGate.Shared.Controls.Help.HelpSystem.DEFAULT_HELP_PAGE"/>)</param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.ShowInteractiveHelp(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            Displays an interactive help form (see <see cref="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm"/> and fills it with the
            content of a HTML file resource. Returns true if the request was handled.
            <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.HelpSource"/> must be set prior to this call.
            </summary>
            <param name="caller"></param>
            <param name="resourceId">resource name</param>
            <param name="longLivedForm">True if you want the IH window to persist when it loses focus</param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.HelpUriEventHandler(System.Object,RedGate.Shared.Controls.Utils.UriLaunchedEventArgs)">
            <summary>
             This handles URLs which start with <see cref="F:RedGate.Shared.Controls.Help.HelpSystem.INTERACTIVE_HELP_URL"/>.  The local path is used as a help id.
            </summary>
             <param name="sender"></param>
             <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.DoShowHelp(System.Windows.Forms.Control,System.Int64)">
            <summary>
            Show the requested help using the appropriate technique (HTML or CHM).
            See <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.ShowCompiledHelp(System.Windows.Forms.Control,System.Int64)"/> and <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.ShowWebHelp(System.Int64)"/>.
            </summary>
            <param name="parent"></param>
            <param name="contextHelpId"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.OnInteractiveHelpLinkClicked(System.Windows.Forms.Control,System.String)">
            <summary>
            Override this method if you want to be notified about interactive help clicks.
            With the help of this overridable you can create links, which shows a form or does something special.
            This is a filter method and will be called for every interactive help link clicks therefore
            return false when you want to keep the original behaviour.
            </summary>
            <param name="caller">control that contains the link</param>
            <param name="resourceId"></param>
            <returns>only return true if you handled the event and don't want the default behaviour happen</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.DoShowInteractiveHelp(System.Windows.Forms.Control,System.String,System.Boolean)">
            <summary>
            Displays an interactive help form (see <see cref="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm"/> and fills it with the
            content of a HTML file resource. Returns true if the request was handled.
            </summary>
            <param name="caller"></param>
            <param name="resourceId">resource name</param>
            <param name="longLivedForm">True if you want the IH window to persist when it loses focus</param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.CustomizeHelpRequest(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest,System.String)">
            <summary>
            Called before InteractiveHelpForm.SetRequest, so inherited classes can customize
            the appearance of the long lived interactive help forms.
            </summary>
            <param name="helpRequest"></param>
            <param name="linkParameters">URL after the first space character (can be null!)</param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.RemoveLongLivedForm(RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm)">
            <summary>
            Call it within a lock (m_LongLivedHelpFormsLock)
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.OnHelpFormClosed(System.Object,System.EventArgs)">
            <summary>
            Handles Closed events of InteractiveHelpForms.
            </summary>
            <param name="sender"></param>
            <param name="eventArgs"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.IsDefaultId(System.Int64)">
            <summary>
            </summary>
            <param name="contextHelpId"></param>
            <returns>Whether the given help id should be sent to the default page</returns>
            <example>return (contextHelpId == DEFAULT_HELP_PAGE) || (contextHelpId == DEFAULT_HELP_PAGE_NONE);</example>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.GetAssemblyMinorVersion(System.Reflection.Assembly)">
            <summary>
            Used by default implementation of <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.ProductWebPath"/>
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.GetAssemblyMajorVersion(System.Reflection.Assembly)">
            <summary>
            Used by default implementation of <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.AssemblyName"/>
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.ShowWebHelp(System.Int64)">
            <summary>
            Show the help for the given help ID
            </summary>
            <remarks>Over-riding this method should only be relevant if yo uwish to contain the server on which the help is constructed.  See <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.StartWebPage(System.String)"/>, <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.ProductWebPath"/>.</remarks>
            <remarks>If over-riding this then <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.ShowCompiledHelp(System.Windows.Forms.Control,System.Int64)"/> should often also be over ridden</remarks>
            <param name="contextHelpId"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.HandleHelpUri(System.Object,RedGate.Shared.Controls.Utils.UriLaunchedEventArgs)">
            <summary>
            <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.HelpUriEventHandler(System.Object,RedGate.Shared.Controls.Utils.UriLaunchedEventArgs)"/>
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.StartWebPage(System.String)">
            <summary>
            Makes a best effort attempt to display the given web address.
            </summary>
            <param name="webAddress"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.ShowCompiledHelp(System.Windows.Forms.Control,System.Int64)">
            <summary>
            Makes a best effort attempt to display the given help using the local CHM file.
            Should fall back to web help on failure.
            </summary>
            <param name="parent"></param>
            <param name="contextHelpId"></param>
            <remarks>parent can be null, in which case see <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.FindParentForm"/></remarks>
        </member>
        <member name="M:RedGate.Shared.Controls.Help.HelpSystem.FindParentForm">
            <summary>
            Attempt to find a master form in the current application.
            Used when a null control is passed into <see cref="M:RedGate.Shared.Controls.Help.HelpSystem.ShowHelp(System.Windows.Forms.Control,System.Int64)"/>.
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:RedGate.Shared.Controls.Help.HelpSystem.HelpSource" -->
        <member name="P:RedGate.Shared.Controls.Help.HelpSystem.Assembly">
            <summary>
            Attempts to get a representative assembly of the current executable
            This is used by <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.AssemblyName"/>, <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.ProductWebPath"/> and <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.ChmPath"/>
            </summary>
            <returns>A Non null assembly</returns>
        </member>
        <member name="P:RedGate.Shared.Controls.Help.HelpSystem.AssemblyName">
            <summary>
            The assembly name for the help system. This is the product name with no spaces, and with the major version appended.
            e.g. "RedGateSoftwareSQLControlsLibrary7"
            If major version is not stuck on the end of the description it will be fetched from the assembly.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Help.HelpSystem.ProductWebPath">
            <summary>
            The path local path on the web server which contains the help for this product.
            e.g. "help/RedGateSoftwareSQLControlsLibrary7/help_1" (for version 7.1)
            </summary>
            <remarks>If over-riding this then <see cref="P:RedGate.Shared.Controls.Help.HelpSystem.ChmPath"/> should often also be over ridden</remarks>
        </member>
        <member name="P:RedGate.Shared.Controls.Help.HelpSystem.ChmPath">
            <summary>
            The full path of the CHM file (if present).
            e.g. @"C:\Program Files\Red Gate\SQL Doc 2\SQLDoc2.CHM"
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Help.HelpSystem.Win32API">
            <summary>
            Needed for keeping the long lived interactive help windows always on top
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Help.HelpSystem.ThreadPoolHelper">
            <summary>
             ThreadPoolHelper, just a little magic to pass parameters to threads
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.ICharacterFormatProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ICharacterFormatProvider.MoveTo(System.Int32)">
            <summary>
            
            </summary>
            <param name="charIndex"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.ICharacterFormatProvider.GetNextFormat(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxChar"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Controls.ICharacterFormatProvider.CurrentFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.CharacterFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.CharacterFormat.Start">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.CharacterFormat.ForeColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.CharacterFormat.BackColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.CharacterFormat.Selected">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.CharacterFormat.#ctor(System.Int32,System.Drawing.Color,System.Drawing.Color,System.Boolean)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="foreColor"></param>
            <param name="backColor"></param>
            <param name="selected"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.ImageComboBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ImageComboBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ImageComboBox.Populate(System.Object[],System.Drawing.Image)">
            <summary>
            Populate the combo box with text fields and a single image.
            </summary>
            <param name="entries"></param>
            <param name="image"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.ImageComboBox.Padding">
            <summary>
            The space in pixels between the image and the text.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor">
            <summary>
            This is the control for an interactive help button, this will show a form containing
            the help when clicked. The text can be in limited HTML (conforming to redgate-help-v1.dtd, RTF or plain text,
             when using HTML the title and size of the help form can be taken from the HTML.
            
            When making changes to this control, please also update the documentation on the wiki:
            http://intranet/wiki/index.php/RedGate.SQL.Controls.InteractiveHelp.InteractiveHelpAnchor
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DefaultFormBackgroundColor">
            <summary>
            The default color with which to color the background of a control which displays interactive help.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GetResourceManager">
            <summary>
            Method used to retrieve the ResourceManager for the strings.
            Rather use add a <see cref="T:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource"/>
            or a custom <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/> to <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GlobalHelpSource"/>.
            </summary>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GlobalHelpSource"/>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpSource">Setting a local help source</seealso>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName"/>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GetLocalResourceManager">
            <summary>
            Overrides the GetResourceManager delegate for forms opened by this instance.
            Rather use <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpSource"/> with a <see cref="T:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource"/>
            or a custom <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/>
            </summary>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpSource"/>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GlobalHelpSource"/>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName"/>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnEnter(System.EventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnLeave(System.EventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnMouseEnter(System.EventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnMouseLeave(System.EventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>
            Swallows this event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            <see cref="M:System.Windows.Forms.ContainerControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)"/>
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor"/> class, using HTML text and a default size
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.LoadHelpFile(System.String)">
            <summary>
            This method isn't recommended anymore, use <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName"/> to load the resource instead.
            Loads up an HTML help file from the executing location of the DLL
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ShowInteractiveHelpForm">
            <summary>
            Shows the interactive help form configured using the state of this instance.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DisplayRequest(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest)">
            <summary>
            Displays the request.  Override this if you don't want the default <see cref="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DisplayInteractiveHelpForm(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest)"/>.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DisplayInteractiveHelpForm(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest)">
            <summary>
             Shows a standard interactive help display form, configured with the <paramref name="request"/>
            </summary>
            <param name="request">Contains the information to load into the help form</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GetHelpSource">
            <summary>
            Implements the logic to get the appropriate <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/>.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.FormOpened">
            <summary>
            When the form for the help is shown this event is fired.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.FormClosed">
            <summary>
            When the form for the help is closed this event is fired.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpShown">
            <summary>
            When the form for the help is shown this event is fired.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpHidden">
            <summary>
            When the form for the help is closed this event is fired.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.FormSize">
            <summary>
            The default size of the help form.  This will be overridden if the size is specified in the Help.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpTitle">
            <summary>
            The title to display. If this is not set (or set to <see cref="F:System.String.Empty"/>) the title
            is extracted from the HTML page.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpText">
             <summary>
             Gets and sets the text displayed in the help form
             Generally this should not be called, interactive help should be provided via the resource specified as <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName"/>
             </summary>
             <example>
             This example shows how to set an HTML text with width and height defined
                 <code lang="HTML">
            &lt;!DOCTYPE html PUBLIC "redgate-help-v1.dtd" "http://ih.red-gate.com/dtd/redgate-help-v1.dtd"&gt;
            &lt;html&gt;
            &lt;head&gt;
            &lt;title&gt;Example HTML&lt;/title&gt;
            &lt;/head&gt;
            &lt;body  width='1000' height='100'&gt;
            &lt;p&gt;This help is wide and fat&lt;/p&gt;
            &lt;/body&gt;
            &lt;/html&gt;    
                 </code>
             </example>
             <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName">Setting the id of the requested help</seealso>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.LastExceptionMessage">
            <summary>
            The message from the last exception that was thrown when attempting to
            parse the input text for this control. Used for debugging broken XHTML
            or RTF.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DisplayFormat">
            <summary>
            Gets and sets the type of text stored in <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpText"/> (Text, Auto, HTML or RTF).
            This is ignored and the detection is always automatic.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.FormTitleColor">
            <summary>
            Gets and sets the title colour
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.FormBackgroundColor">
            <summary>
            Gets and sets the background colour
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.MouseOverControl">
            <summary>
            Is the mouse currently over the control
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.CurrentHelpImage">
            <summary>
            The image which should be displayed for this anchor
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.DefaultHelpImage">
            <summary>
            Gets the default image to be displayed when the mouse is not over the control.
            This image will be used if <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpImage"/> is set to null.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpImage">
            <summary>
            Gets and sets the image to be displayed when the mouse is not over the control. If set to null the default is used.
            The disabled and hot images are derived from this using <see cref="M:RedGate.Shared.Controls.Utils.ImageUtils.CreateImageWithAttribute(System.Drawing.Image,System.Drawing.Imaging.ImageAttributes)"/>
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName">
            <summary>
            This is the usual way to specify help.  The help id given will normally be looked up in a resource.
            </summary>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GlobalHelpSource">Setting up a global help source</seealso>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpSource">Setting a different help source</seealso>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpSource">
            <summary>
            If set, supplies a help source overrding all other ways of getting a help source.
            </summary>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GlobalHelpSource">Specifying a global help source</seealso>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName">Setting the id of the requested help</seealso>
            <seealso cref="T:RedGate.Shared.Controls.InteractiveHelp.ResourceHelpSource">A help source based on a Resources</seealso>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GlobalHelpSource">
            <summary>
            Gets help from the <see cref="T:System.Resources.ResourceManager"/> of the entry <see cref="T:System.Reflection.Assembly"/>.
            Extra <see cref="T:RedGate.Shared.Controls.InteractiveHelp.IHelpSource"/>s can be added <see cref="T:RedGate.Shared.Controls.InteractiveHelp.HelpSourceManager"/>.
            </summary>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.HelpSource">Setting a local help source</seealso>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceManagerGetter">
            <summary>
            Delegate type when needing to provide a different assembly for the resources
            </summary>
            <returns></returns>
            <seealso cref="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GetLocalResourceManager"/>
            <seealso cref="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.GetResourceManager"/>
            <seealso cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor.ResourceName"/>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm">
            <summary>
            The popup form for the <see cref="T:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpAnchor"/>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.GetTitleGradientBrush(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Returns the brush which should be used to fill the title bar
            This brush is constant <see cref="P:System.Drawing.SystemColors.ActiveCaption"/> from the left of the bounding rectangle and then fades to <see cref="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.FormBackgroundColor"/>
            </summary>
            <param name="boundingRectangle">The rectangle over which the brush should work</param>
            <param name="nonGradientWidth">The size of the text which should be excluded from the gradient</param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.CopyRichTextContents">
            <summary>
            Copy appropriate text when user selects copy by any means.
            In particular, copies everything if nothing is selected
            <see href="http://rg-jira01/browse/SHC-44"/>
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.m_MouseDown">
            <summary>
            On mouse down ensure we have focus so we can drag-select
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.m_Gripper_PreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            As the rich text box doesn't have focus - the control that does have focus needs
            to respond to its keypressed for it.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.Place(System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Places the form 'near' <paramref name="nearRectangle"/>.
            Place to the right and below of the control, with the icon aligned with the top of the control.
            <ul>
            <li>If the form falls off the right of the screen then move it left, and place form below control to avoid obscuring it.</li>
            <li>If the form falls of the bottom of the screen then move it up.</li>
            <li>If both previous cases occur then move the form above the control to avoid obscuring it.</li>
            <li>If the form is above the top of the screen move it down.</li>
            </ul>
            
            the form should not obscure the text that it is showing help about.
            
            The screen size excludes a scrollbar width and height to make sure that the IH does not butt right up to
            the screen edge
            
            </summary>
            <param name="clientRectangle">The controls client rectangle on screen that caused the form to load</param>
            <param name="nearRectangle">The screen rectangle to place Form near.  Usually the 
            screen rectangle of the control.</param>
            <returns>the top left hand corner of the form</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.SetRequest(RedGate.Shared.Controls.InteractiveHelp.AnchorHelpRequest)">
            <summary>
            Sets up the help form image, text and position.
            </summary>
            <param name="request"></param>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.Title">
            <summary>
            The title to display. If this is not set (or set to string.empty) the title
            is extracted from the HTML page.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.FormBackgroundColor">
            <summary>
            The form background colour
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.FormTitleColor">
            <summary>
            The form title colour
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.InteractiveHelpForm.HelpImage">
            <summary>
            The help image.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox">
            <summary>
            A <see cref="T:System.Windows.Forms.RichTextBox"/> that can be printed
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox"/> class
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.FormatRange(System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Drawing.Graphics,System.Int32,System.Int32)">
            <summary>
            Calculate or render the contents of our RichTextBox for printing
            </summary>
            <param name="measureOnly">If true, only the calculation is performed,
            otherwise the text is rendered as well</param>
            <param name="e">The PrintPageEventArgs object from the
            PrintPage event</param>
            <param name="charFrom">Index of first character to be printed</param>
            <param name="charTo">Index of last character to be printed</param>
            <returns>(Index of last character that fitted on the
            page) + 1</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.HundredthInchToTwips(System.Int32)">
            <summary>
            Convert between 1/100 inch (unit used by the .NET framework)
            and twips (1/1440 inch, used by Win32 API calls)
            </summary>
            <param name="n">Value in 1/100 inch</param>
            <returns>Value in twips</returns>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.FormatRangeDone">
            <summary>
            Free cached data from rich edit control after printing
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InteractiveHelp.PrintableRichTextBox.Print(System.Drawing.Printing.PrinterSettings,System.String)">
            <summary>
            Sends the contents of the text box to the default printer
            </summary>
            <param name="printerSettings"></param>
            <param name="title"></param>
        </member>
        <member name="T:RedGate.Shared.Controls.InteractiveHelp.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.Close">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.CloseHot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.document_error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.Gripper16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.Html2Rtf">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;!--
            This style sheet converts &quot;html&quot; (as described by redgate-help-v1.dtd) into Rich Text (http://msdn.microsoft.com/en-us/library/aa140283(office.10).aspx).
            
            In order to include images an extension object is used.   
            http://red-gate.com/image-source is expected to have a GetRtfImage(string name) method which returns the rtf to include an image
            
            &lt;a&gt; tags will only be respected if the Rtf implementation respects the protocol of the href.
            The hrefs included will [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.InteractiveHelpIdNotFound">
            <summary>
              Looks up a localized string similar to Help not found: {0}.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.PrintingErrorMessage">
            <summary>
              Looks up a localized string similar to An error occurred when attempting to print: {0}.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.PrintingErrorMessageTitle">
            <summary>
              Looks up a localized string similar to Printing error.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.QuestionMark16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.redgate_help_v1">
             <summary>
               Looks up a localized string similar to &lt;!--This is a cut down DTD that provides the entities but doesn&apos;t workwith validation.
                The longer version is included as part of the build but not the install.--&gt;
            
            &lt;!ENTITY % HTMLlat1 PUBLIC
               &quot;-//W3C//ENTITIES Latin 1 for XHTML//EN&quot;
               &quot;xhtml-lat1.ent&quot;&gt;
            %HTMLlat1;
            
            &lt;!ENTITY % HTMLsymbol PUBLIC
               &quot;-//W3C//ENTITIES Symbols for XHTML//EN&quot;
               &quot;xhtml-symbol.ent&quot;&gt;
            %HTMLsymbol;
            
            &lt;!ENTITY % HTMLspecial PUBLIC
               &quot;-//W3C//ENTITIES Special for XHTML//EN&quot;
               &quot;xhtml-special.ent&quot;&gt;
            %HTMLspecial;
            .
             </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.UnableToDisplayHelp">
             <summary>
               Looks up a localized string similar to Unable to display Help: {0}
            {1}.
             </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.UnableToDisplayHelpTitle">
            <summary>
              Looks up a localized string similar to Couldn&apos;t start web page.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.UnableToFollowHelpRtfLinkTitle">
            <summary>
              Looks up a localized string similar to Couldn&apos;t launch {0}.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.UnableToFollowRtfLink">
             <summary>
               Looks up a localized string similar to Couldn&apos;t launch {0}
            {1}.
             </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.xhtml_lat1">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.xhtml_special">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InteractiveHelp.Resources.xhtml_symbol">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InLineProgressBar">
            <summary>
            Summary description for InLineProgressBar.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.InLineProgressBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InLineProgressBar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Controls.InLineProgressBar"/> class
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InLineProgressBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InLineProgressBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.InLineProgressBar.SetTasks(System.Collections.Generic.IList{RedGate.Shared.Utils.ProgressTasks.ProgressTask})">
            <summary>
            This sets the list of tasks, and starts executing them consecutively
            </summary>
            <param name="tasks">The list of tasks to execute</param>
        </member>
        <member name="M:RedGate.Shared.Controls.InLineProgressBar.ExecuteTasks(System.Collections.Generic.IList{RedGate.Shared.Utils.ProgressTasks.ProgressTask})">
            <summary>
            This will execute the set of supplied tasks. It is assumed that the events have already been hooked up.
            This call will return immeadiately because all the work is being 
            carried on a seperate worker thread.
            </summary>
            <param name="tasks">The list of tasks to execute</param>
            <exception cref="T:System.ArgumentException">Can be generated if this method is called without the previous task completing first</exception>
        </member>
        <member name="M:RedGate.Shared.Controls.InLineProgressBar.Run">
            <summary>
            This implementation does nothing here as the work was initiated by SetTasks
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Controls.InLineProgressBar.CancelButton">
            <summary>
            Allows the cancel button to be customized
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InLineProgressBar.PercentageLabel">
            <summary>
            Allows customization of percentage label
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InLineProgressBar.ProgressBar">
            <summary>
            Allows customization of ProgressBar
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.InLineProgressBar.StateOfTasks">
            <summary>
            Gets the current state of the executing task
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.InLineProgressBar.MySimpleProgressTaskExecutor">
            <summary>
            This is my private implementation that allows me to get to the bits &amp; bobs that I need
            to hook up the UI!
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.ProgressBarControl">
            <summary>
            Summary description for ProgressBarControl.
            </summary>
            
        </member>
        <member name="T:RedGate.Shared.Controls.IProgressBarControl">
            <summary>
            Defines methods used to display the progress of a task
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.IProgressBarControl.SetAbortedMessage(System.String)">
            <summary>
            Sets the text displayed to the user if the task is aborted
            The decision whether the given message is in html format is made on if the string StartWith html tag.
            </summary>
            <param name="htmlAbortedMessage">The message text</param>
        </member>
        <member name="M:RedGate.Shared.Controls.IProgressBarControl.SetAbortedDetails(System.String,System.Boolean,System.Boolean)">
            <summary>
             Sets the details of the abortion if needed. Accepts multi-line texts.
            </summary>
            <param name="abortedMessageDetails">Message text, \r, \n allowed for line separation.</param>
            <param name="doOffsetOnHighDpi">Check for shifting text based on whether we're in high dpi mode.</param>
            <param name="isHtml">Whether the details being passed in are html</param>
        </member>
        <member name="M:RedGate.Shared.Controls.IProgressBarControl.SetToolTip(System.String)">
            <summary>
            Sets the tooltip text
            </summary>
            <param name="toolTipText">The tooltip text</param>
        </member>
        <member name="P:RedGate.Shared.Controls.IProgressBarControl.Percentage">
            <summary>
            Gets and sets the percentage of the task completed
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.IProgressBarControl.Control">
            <summary>
            Gets the control displaying the progress bar
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.IProgressBarControl.FinishedControl">
            <summary>
            Gets and sets the control displayed when the task is completed
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressBarControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.ProgressBarControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TaskItemControl">
            <summary>
            Displays the execution status of a <see cref="T:RedGate.Shared.Utils.ProgressTasks.ProgressTask"/>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TaskItemControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TaskItemsControl">
            <summary>
            Displays several <see cref="T:RedGate.Shared.Controls.TaskItemControl"/>s
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.TaskItemsControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TaskItemsControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TaskItemsControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Resources">
            <summary>
            Provide centralised access to localised resources.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Resources.Get(System.String)">
            <summary>
            Accesses localised strings given a resource identifier.
            </summary>
            <param name="identifier">Resource identifier string.</param>
            <returns>Localised resource string.</returns>
        </member>
        <member name="T:RedGate.Shared.Controls.Spinner.Spinner">
            <summary>
            This component runs the timing for <see cref="T:RedGate.Shared.Controls.Spinner.SpinnyWidget"/> controls and <see cref="M:RedGate.Shared.Controls.Spinner.Spinner.DrawSpinner(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle)">manually drawn</see> spinners on a page.
            Without this the controls do not update. Call <see cref="M:RedGate.Shared.Controls.Spinner.Spinner.StopSpinning(System.Windows.Forms.Control)"/> in order to prevent a control
            retrieving redraw messages (<see cref="T:RedGate.Shared.Controls.Spinner.SpinnyWidget"/> does this internally for itself).
            </summary>
            <remarks>
            All controls show the animations in lock step.
            </remarks>
        </member>
        <member name="F:RedGate.Shared.Controls.Spinner.Spinner.m_mapWindowToRegion">
            <summary>
            List of regions to invalidate on the next tick.
            Access is synchronized by locking on the map itself.
            No regions in this dictionary have been disposed.
            Regions should be disposed once they are removed.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.#ctor(System.ComponentModel.IContainer)">
            <summary>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.SetTimer">
            <summary>
             Set the timer speed and enabled state according to <see cref="P:System.ComponentModel.Component.DesignMode"/>,
              <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Speed"/>, <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Enabled"/> and <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.DefaultFrameInterval"/>.
             
            </summary>
             <remarks>
             This method can be overridden to change the relationship between Speed and the interval on <see cref="F:RedGate.Shared.Controls.Spinner.Spinner.m_SpinnerTimer"/>,
             or to make the spinner spin when a sub-classed control is disabled.
             </remarks>
            <exception cref="T:System.ArgumentException">Thrown if speed is out of range</exception>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.StopSpinning(System.Windows.Forms.Control)">
            <summary>
            This will prevent the shared spinner forcing refreshes for the given
            window
            </summary>
            <param name="window"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.DrawSpinner(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draw a spinner at the given coordinates using the supplied
            Graphics object.
            </summary>
            <remarks>
            In addition to drawing the spinner, this method uses the supplied
            Control and rectangle to remember a list of regions, per window,
            in which spinners have been drawn. When the spinner image is due
            to tick around to the next image, these regions will automatically
            be invalidated via window.Invalidate(region). The window is expected
            to then call DrawSpinner() again if a spinner is still appropriate,
            and so on, until the spinner is no longer required.
            Multiple spinners are permitted per window; multiple DrawSpinner()
            calls will result in a region being created containing all spinner
            rectangles, and the whole region will be invalidated when the
            spinner image changes.
            </remarks>
            <param name="window">The window to which the image will be drawn.</param>
            <param name="graphics">The graphics object with which to draw.</param>
            <param name="rect">The rectangle which the spinner should occupy.</param>
            <exception cref="T:System.ArgumentException">If the graphics object is null</exception>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.DoSpin(System.Object,System.EventArgs)">
            <summary>
            Obsolete: use <see cref="M:RedGate.Shared.Controls.Spinner.Spinner.PerformSpin"/> instead of this method.
            Updates the spinner to the next image. If you wish to fire this handler yourself, 
            stop the spinner firing by setting <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Enabled"/> to false.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.PerformSpin">
            <summary>
            Updates the spinner to the next image. If you wish to fire this handler yourself, 
            stop the spinner firing by setting <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Enabled"/> to false.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.OnImageChanged">
            <summary>
            Raises the <see cref="E:RedGate.Shared.Controls.Spinner.Spinner.ImageChanged"/> event. 
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.Spinner.Spinner.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.Spinner.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.DefaultFrameInterval">
            <summary>
            The interval between succesive frames if speed is set to 1.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.Spinner.Spinner.ImageChanged">
            <summary>
            Fired on a timer whenever the spinner image changes.
            Whilst the Spinner class exists and Application events are being fired this occurs regularly,
            regardless of whether a spinner is currently visible
            in any window. 
            Normally this means it is fired, since some bit of GUI is running.
            See also the <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.SpinnerImage"/> property.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.Images">
            <summary>
            Returns the sequence of images that should be shown.
            Must be non-empty.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.StoppedImage">
            <summary>
             An image to show when the spinner is stopped.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.SpinnerImage">
            <summary>
            Direct access to the current spinner image, in case the caller
            wishes to implement their own spinner draw/invalidate cycle.
            See DrawSpinner for a simpler way to draw spinners
            See also the ImageChanged event.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.SpinSpeed">
             <summary>
             Obsolete: use <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Enabled"/> or <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Speed"/> instead.
             Interval between frames measured in milliseconds. The default value is 50.
             Set to zero to stop spinning.
             </summary>
            <exception cref="T:System.ArgumentException">Thrown if speed is out of range</exception>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.Speed">
            <summary>
             The speed at which the animation will run.
             This is a unitless value which dictates how fast the animation runs compared to the default.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if magnitude of speed is more than 16</exception>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.Spinner.Enabled">
            <summary>
             Gets or sets whether the spinner is running (spinning).
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Spinner.SpinnerImages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner0">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner10">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner11">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner3">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner4">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner5">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner6">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner7">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner8">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnerImages.Spinner9">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Spinner.SpinnyWidget">
            <summary>
            This class provides a Spinny that can be used to overwrite a control with a spinner image, on
            a single form all controls can share a single <see cref="T:RedGate.Shared.Controls.Spinner.Spinner"/> which causes the repaints to occur.
            This means changing the <see cref="P:RedGate.Shared.Controls.Spinner.Spinner.Speed"/> for any control affects all controls using
            that <see cref="T:RedGate.Shared.Controls.Spinner.Spinner"/>. 
            <remarks>
            If you don't set a spinner, this spinny widget will not spin.
            Stopping the <see cref="T:RedGate.Shared.Controls.Spinner.SpinnyWidget"/> doesn't stop the <see cref="T:RedGate.Shared.Controls.Spinner.Spinner"/>.
            This means the Image jumps when it stops and starts.
            </remarks>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.SpinnyWidget.#ctor">
            <summary>
            See <see cref="T:RedGate.Shared.Controls.Spinner.SpinnyWidget"/>
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.SpinnyWidget.SpinnyWidget_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            Draw the text and the spinny image on the control
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            Drawing the <see cref="T:RedGate.Shared.Controls.Spinner.Spinner"/> is sufficient to cause it to spin.  See <see cref="M:RedGate.Shared.Controls.Spinner.Spinner.DrawSpinner(System.Windows.Forms.Control,System.Drawing.Graphics,System.Drawing.Rectangle)"/>.
            </remarks>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.SpinnyWidget.SpinnyWidget_Layout(System.Object,System.Windows.Forms.LayoutEventArgs)">
            <summary>
            When the control is layed out I may need to move it if it's covering
            another control as this could have been set in the designer.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:RedGate.Shared.Controls.Spinner.SpinnyWidget.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.SpinnyWidget.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.Spinner.SpinnyWidget.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.Spin">
            <summary>
            Sets whether the spinny is spinning or not. If <see cref="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.CoverControl"/>
            is not null, the spinny will hide or cover <see cref="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.CoverControl"/> as appropriate.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.CoverControl">
            <summary>
            The control that this widget will cover.
            </summary>
            <remarks>
            <a href="http://rg-jira01/browse/SHC-32">SHC-32</a>
            If the <see cref="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.CoverControl"/> is moved programatically (rather than by layout) the <see cref="T:RedGate.Shared.Controls.Spinner.SpinnyWidget"/> will not move.
            This can be worked around by calling <see cref="!:PerformLayout"/> when the <see cref="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.CoverControl"/>  has moved.
            <example>
                widget.CoverControl.LocationChanged += delegate {widget.PerformLayout;};
            </example>
            </remarks>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.SpinText">
            <summary>
            The text that is shown below the spinner
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.SpinnerDrawer">
            <summary>
            This is spinner drawer component used for timing the draws to this control, without this it won't spin.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.Spinner.SpinnyWidget.MaxSpinnerDimension">
            <summary>
            This sets the maximum size at which the spinner image will be drawn, even if there is space for a bigger one.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.BaseTextBox">
            <summary>
            Base class for a read-only text box with scroll bars
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.EnableCaret">
            <summary>
            Enables the caret at the last position it was at
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.DisableCaret">
            <summary>
            Disables the caret
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RedGate.Shared.Controls.TextBoxControls.BaseTextBox"/> class
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnVisibleChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.CloseFindDialog">
            <summary>
            Closes the find dialog box
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.GetLineText(System.Int32)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.GetStartIndexOfLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.GetColourOfCharacter(System.Int64)">
            <summary>
            This code is used so you can color each character
            </summary>
            <param name="charIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.GetTextBrush(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.GetBackColourOfCharacter(System.Int64,System.Int32)">
            <summary>
            
            </summary>
            <param name="charIndex"></param>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SelectAll">
            <summary>
            Selects all the text in the text box
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.Copy">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.Find">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.CopyToClipBoard(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fromCharIndex"></param>
            <param name="toCharIndex"></param>
            <param name="fromLineIndex"></param>
            <param name="toLineIndex"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.ScrollToLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="lineNumber"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnScrolled(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SetScrollBarsToTopLeft">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.CalculateLayout">
            <summary>
            Work out how things are going to be positioned on the screen
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SetupScrollBars">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.ScreenToVirtualX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.ScreenToVirtualY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.VirtualToScreenX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.VirtualToScreenY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.GetCharOffset(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="lineNumber"></param>
            <param name="charIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnResize(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Deals with Control+C, Control+A and Control+F
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Control/Shift and Down/Up/Left/Right/Home/End
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.MoveToLine(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Moves the carat to the specified line number and character position
            </summary>
            <param name="lineNumber">The line number to move to</param>
            <param name="charPosition">The character position to move to</param>
            <param name="extendSelection">
            If <em>true</em>, the selection will be extended to include the specified line &amp; character position
            </param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.MoveToChar(System.Int32,System.Boolean)">
            <summary>
            Moves the carat to the specified position in the current line
            </summary>
            <param name="charIndex">The character to move to</param>
            <param name="extendSelection">
            If <em>true</em>, the selection will be extended to include the specified character position
            </param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnFontChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.OnDoubleClick(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.Scrolled">
            <summary>
            Fired when the window is scrolled - funnily enough
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.FirstVisibleLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.LastVisibleLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.CaretLineIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.CaretCharIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SelectionStart">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SelectionEnd">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SelectionStartLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.SelectionEndLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.VScrollBarVisible">
            <summary>
            Gets and sets a value indicating if the vertical scroll bar is visible
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.TabWidth">
            <summary>
            Gets and sets the number of spaces to display for a tab character
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.LeftMargin">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.DrawToEdge">
            <summary>
            Gets a value indicating if the text should be displayed up to the 
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.LineCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.MaxLineLength">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.TopLeftCharacterPosition">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.LineHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.BaseTextBox.NumberOfLinesOnPage">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs">
            <summary>
            The event arguments for a <see cref="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CaretPositionChanged"/> event
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs"/> struct with the specified variables
            </summary>
            <param name="caretLineIndex"></param>
            <param name="caretCharIndex"></param>
            <param name="oldCaretLineIndex"></param>
            <param name="oldCaretCharIdex"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs.CaretLineIndex">
            <summary>
            The new carat line index
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs.CaretCharIndex">
            <summary>
            The new carat character index
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs.OldCaretLineIndex">
            <summary>
            The old carat line index
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs.OldCaretCharIdex">
            <summary>
            The old carat character index
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.CloseButton">
            <summary>
            Displays a fancy close button
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.TextBoxControls.CloseButton.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.CloseButton.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.CloseButton.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox">
            <summary>
            A text box that can be nicely coloured
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnGotFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnLostFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.GetLineText(System.Int32)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.GetLineLength(System.Int32)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.GetFormatProvider(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <param name="selectionStart"></param>
            <param name="selectionEnd"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SelectAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnSelectAll(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.Copy">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnCopy(RedGate.Shared.Controls.TextBoxControls.CopyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.Find">
            <summary>
            Show the incremental search control and fires the SearchOpened event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnFind(RedGate.Shared.Controls.TextBoxControls.FindEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.FindString(System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="searchString"></param>
            <param name="findNext"></param>
            <param name="matchCase"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ResetCaret">
            <summary>
            Move caret to position 0,0 and scroll to left of first line too
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.HideCaret">
            <summary>
            
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.MoveCaretPosition(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <param name="charIndex"></param>
            <param name="extendSelection"></param>
            <param name="scrollToCaret"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.MoveToChar(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="charIndex"></param>
            <param name="extendSelection"></param>
            <param name="scrollToCaret"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.MoveToLine(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="lineNumber"></param>
            <param name="extendSelection"></param>
            <param name="scrollToCaret"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.MoveToPoint(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="extendSelection"></param>
            <param name="scrollToCaret"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnCaretPositionChanged(RedGate.Shared.Controls.TextBoxControls.CaretPositionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnSelectionChanged(RedGate.Shared.Controls.TextBoxControls.SelectionChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnResize(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            
            </summary>
            <param name="levent"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CalculateLayout">
            <summary>
            Work out how things are going to be positioned on the screen
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnSetupScrollBars(RedGate.Shared.Controls.TextBoxControls.SetupScrollBarsEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ScreenToVirtualX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ScreenToVirtualY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.VirtualToScreenX(System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.VirtualToScreenY(System.Int32)">
            <summary>
            
            </summary>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnPaintLineBackground(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ScrollToLine(System.Int32)">
            <summary>
            
            </summary>
            <param name="lineNumber"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ScrollToLeftOffset(System.Int32)">
            <summary>
            
            </summary>
            <param name="leftOffset"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnVScrolled(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnHScrolled(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnFontChanged(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.OnDoubleClick(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.HideFind">
            <summary>
            Closes the incremental search control and raises the SearchClosed event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ShowRightClickMenu(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.AddRightClickMenuItem(System.Windows.Forms.MenuItem)">
            <summary>
            
            </summary>
            <param name="menuItem"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.VScrolled">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.HScrolled">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SetupScrollBars">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CaretPositionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SelectionChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CopyToClipboard">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.GetLine">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.GetLineCount">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.GetFormat">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.PaintLine">
            <summary>
            
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SearchForNext">
            <summary>
            Occurs when the user clicks on the FindNext button or hits Enter.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SearchForPrevious">
            <summary>
            Occurs when the user clicks on the FindPrevious button.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SearchClosed">
            <summary>
            Occurs when the user closes the search control by clicking on the close button. The search control
            is first made not visible and the ColoredTextBoxControl is layed out before the event occurs.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.FindOpen">
            <summary>
            Occurs before the incremental search control is opened event can adjust the text
            and even cancel the showing of the control.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SearchOpened">
            <summary>
            Occurs after the search control is opened. You can use the property FindHeight to get
            the height of the control.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.TabWidth">
            <summary>
            The tab width (default 4)
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.MinimumWidth">
            <summary>
            Minimum line width (default 0)
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.ScrollBars">
            <summary>
            Show scrollbars (default ScrollBars.Both)
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.HighlightCurrentLine">
            <summary>
            Highlights the current line (default true)
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.IsFindVisible">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.TopLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.BottomLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.LeftOffset">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SelectionStartLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SelectionStartCharIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SelectionEndLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.SelectionEndCharIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CaretLineIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CaretCharIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.LineHeight">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.NumberOfLinesOnPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.IsSelection">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.MaxLineWidth">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.FindHeight">
            <summary>
            The height of the incremental search control - only really useful when it has been shown.
            Returns 0 if the incremental search control isn't currently visible.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.LeftMargin">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.LineCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.CaseSensitiveSearch">
            <summary>
            Set to false initially. If this is true the incremental search will perform a case
            sensitive search of the data.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.FindMenuItemChecked">
            <summary>
            Gets and sets a value indicating if the Find menu item is checked.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.ColoredTextBox.AllowFindClose">
            <summary>
            When this is set to true the incremental search part of the control cannot be closed via UI.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.CopyEventArgs">
            <summary>
            Provides data for the CopyToClipboard event and the OnCopy virtual function.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.CopyEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="startLine"></param>
            <param name="startCharIndex"></param>
            <param name="endLine"></param>
            <param name="endCharIndex"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CopyEventArgs.StartLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CopyEventArgs.StartCharIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CopyEventArgs.EndLine">
            <summary>
            
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.CopyEventArgs.EndCharIndex">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.DefaultCharacterFormatProvider">
            <summary>
            Summary description for DefaultCharacterFormatProvider.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.DefaultCharacterFormatProvider.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="selectionStart"></param>
            <param name="selectionEnd"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.DefaultCharacterFormatProvider.MoveTo(System.Int32)">
            <summary>
            
            </summary>
            <param name="charIndex"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.DefaultCharacterFormatProvider.GetNextFormat(System.Int32)">
            <summary>
            
            </summary>
            <param name="maxChar"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.DefaultCharacterFormatProvider.CurrentFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.FindEventArgs">
            <summary>
            Provides information for the FindOpen event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.FindEventArgs.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="findString"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.FindEventArgs.FindString">
            <summary>
            This is the string that is to be searched for - this
            can be modified in the event.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.FindEventArgs.Cancel">
            <summary>
            Setting this to true will cause the incremental search control
            not to be displayed.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.GetFormatEventArgs">
            <summary>
            Provides data for the GetFormat event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.GetFormatEventArgs.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="lineIndex"></param>
            <param name="selectionStart"></param>
            <param name="selectionEnd"></param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetFormatEventArgs.LineIndex">
            <summary>
            The of the format provider
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetFormatEventArgs.SelectionStart">
            <summary>
            The character in the line in which the selection starts
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetFormatEventArgs.SelectionEnd">
            <summary>
            The character in the line in which the selection ends
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetFormatEventArgs.FormatProvider">
            <summary>
            The character format provider for the line.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.GetLineCountEventArgs">
            <summary>
            Provides data for the GetLine event.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetLineCountEventArgs.LineCount">
            <summary>
            The number of lines
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.GetLineEventArgs">
            <summary>
            Provides data for the GetLine event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.GetLineEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the GetLineEventArgs class using the specified line.
            </summary>
            <param name="line">line of text requested</param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetLineEventArgs.Line">
            <summary>
            The line of text requested
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.GetLineEventArgs.Text">
            <summary>
            Set this to be the text for the line.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch">
            <summary>
            Defines a control that can be used for searching.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.#ctor">
            <summary>
            Creates an IncrementalSearch control.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.OnVisibleChanged(System.EventArgs)">
            <summary>
            This member override Control.OnVisibleChanged. This reset the back colour
            of the text box control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.components">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
            
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.m_FindNext_Click(System.Object,System.EventArgs)">
            <summary>
            Raises the SearchForNext event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.m_FindPrevious_Click(System.Object,System.EventArgs)">
            <summary>
            Raises the SearchForPrevious event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.m_SearchText_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the OnKeyDown event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.MatchesFound">
            <summary>
            Remove any coloration from the background
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.NoMatchesFound">
            <summary>
            Colourize the background
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.ShowInteractiveSearch(System.String)">
            <summary>
            Shows the incremental search control with the specified text and sets the focus to the search text control.
            </summary>
            <param name="findString">The string that is placed into the search box initially.</param>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.ShowInteractiveSearch">
            <summary>
            Shows the incremental search control with the previous text and sets the focus to the search text control.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.IncrementalSearch_Resize(System.Object,System.EventArgs)">
            <summary>
            This is necessary to allow the control to expand to a point and then keep
            the arrows tied to the text box and then allow the control to shrink again.
            Col 0 - Find
            Col 1 - Text Box
            Col 2 - Find next
            Col 3 - Find previous
            Col 4 - Close button
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.Close">
            <summary>
            Occurs when the user closes the control by clicking on the close button. This control
            is first made not visible, you should probably re-layout your container upon receiving this.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.SearchForNext">
            <summary>
            Occurs when the user clicks on the FindNext button or hits Enter.
            </summary>
        </member>
        <member name="E:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.SearchForPrevious">
            <summary>
            Occurs when the user clicks on the FindPrevious button.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.NotFoundColor">
            <summary>
            This specifies the color that the background of the control will
            be set to when a false value is Received as part of the SearchEventArgs
            from SearchForPrevious or SearchForNext events.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.NotFoundFlashColor">
            <summary>
            This specifies the color that the background of the control will
            be flash to when a false value is Received as part of the SearchEventArgs
            from SearchForPrevious or SearchForNext events and the background of the
            control has already been set to NotFoundColor.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.IncrementalSearch.EnterSwallowingTextBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            We need to make sure we swallow the enter key or it
            gets transmitted to the top level window which if it is 
            a dialog box means the default button gets pressed
            </summary>
            <param name="keyData"></param>
            <returns></returns>
            
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.PaintLineEventArgs">
            <summary>
            Provides data for the PaintLine event.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.PaintLineEventArgs.#ctor(System.Int32,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the SearchEventArgs class using the specified searchString.
            </summary>
            <param name="line">The line of text that is being painted</param>
            <param name="graphics">The graphics object that should be used to paint</param>
            <param name="bounds">The bounds of the line that is being painted</param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.PaintLineEventArgs.Line">
            <summary>
            The line of text that is being painted
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.PaintLineEventArgs.Graphics">
            <summary>
            The graphics object that should be used to paint
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.PaintLineEventArgs.Bounds">
            <summary>
            The bounds of the line that is being painted
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.SearchEventArgs">
            <summary>
            Provides data for the SearchForNext and SearchForPrevious events.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.TextBoxControls.SearchEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the SearchEventArgs class using the specified searchString.
            </summary>
            <param name="searchString">String that is being searched for</param>
            <param name="forward">true if searching forward, false if searching backwards</param>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.SearchEventArgs.Found">
            <summary>
            This should be set to true if the text has been found, false otherwise.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.SearchEventArgs.SearchString">
            <summary>
            This is the text string that the user has entered to search for.
            </summary>
        </member>
        <member name="P:RedGate.Shared.Controls.TextBoxControls.SearchEventArgs.Forward">
            <summary>
            This is true if the user is searching forward, false if the user is searching backwards.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.SelectionChangedEventArgs">
            <summary>
            Summary description for CaretPositionChangedEventArgs.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.SetupScrollBarsEventArgs">
            <summary>
            Summary description for SetupScrollBarsEventArgs.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.Uniscribe">
            <summary>
            Uniscribe functions and structures.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.Uniscribe.SCRIPT_CACHE">
            <summary>
            SCRIPT_CACHE is an opaque pointer to a Uniscribe font metric cache structure. 
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.TextBoxControls.Uniscribe.SCRIPT_CACHE.Ptr">
            <summary>
            Pointer to an internal font metric cache structure
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.Uniscribe.HBRUSH">
            <summary>
            SCRIPT_CACHE is an opaque pointer to a Uniscribe font metric cache structure. 
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.TextBoxControls.Uniscribe.HBRUSH.Ptr">
            <summary>
            Pointer to an internal font metric cache structure
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.Uniscribe.GOFFSET">
            <summary>
            The GOFFSET structure contains the x and y offsets of the combining glyph.
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.TextBoxControls.Uniscribe.GOFFSET.du">
            <summary>
            x offset, in logical units, for the combining glyph. 
            </summary>
        </member>
        <member name="F:RedGate.Shared.Controls.TextBoxControls.Uniscribe.GOFFSET.dv">
            <summary>
            y offset, in logical units, for the combining glyph. 
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.TextBoxControls.UniscribeTextHandler">
            <summary>
            Summary description for TextLineRenderer.
            </summary>
        </member>
        <member name="T:RedGate.Shared.Controls.Utils.UriUtils">
            <summary>
             A utility class for Uri related things.
            </summary>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.UriUtils.DoLaunchUri(System.Object,RedGate.Shared.Controls.Utils.UriLaunchedEventArgs)">
            <summary>
             Try and launch url in a web browser.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.UriUtils.ShowWebPage(System.Uri)">
            <summary>
             Attempts to show web page in a browser
            </summary>
             <remarks>This exists because W2K does not support <see cref="M:System.Diagnostics.Process.Start(System.String)"/> on <see cref="!:uri"/>.</remarks>
            <param name="uri"></param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="uri"/> cannot be started</exception>
        </member>
        <member name="M:RedGate.Shared.Controls.Utils.UriUtils.ShowWebPage(System.String)">
            <summary>
             Attempts to show web page in a browser
            </summary>
             <remarks>This exists because W2K does not support <see cref="M:System.Diagnostics.Process.Start(System.String)"/> on a url.</remarks>
            <param name="webAddress">the url</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="webAddress"/> cannot be started</exception>
        </member>
    </members>
</doc>
