<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RedGate.Licensing.Client</name>
    </assembly>
    <members>
        <member name="T:RedGate.Licensing.Client.ActivationException">
            <summary>
            An exception representing an error in both activation and
            deactivation processes - if the exception is thrown with an XML
            error message (format in wiki) then an appropriate error dialog
            will be displayed to the user - allowing them to retry etc.  
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationException.#ctor">
            <summary>
            Construct an ActivationException that does not represent a 
            connection error
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationException.#ctor(System.String)">
            <summary>
            Construct an ActivationException that does not represent a econnection error
            </summary>
            <param name="message">message to associate with the exception</param>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationException.#ctor(System.String,System.Boolean)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="message">message to associate with the exception</param>
            <param name="connectionError">Whether the ActivationException represents a connection error</param>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="message">message to associate with the exception</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationException.#ctor(System.String,System.Boolean,System.Exception)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="message">message to associate with the exception</param>
            <param name="connectionError">Whether the ActivationException represents a connection error</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationException.XmlError">
            <summary>
            The xml representation of the error for display in the UI
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationException.ConnectionError">
            <summary>
            Get a bool representing whether this Exception represents a ConnectionError
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.CreateLicence">
            <summary>
            Delegate to create a licence on demand, if needed
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.Licensing.Client.DeactivationException">
            <summary>
            An exception representing an error in both activation and
            deactivation processes - if the exception is thrown with an XML
            error message (format in wiki) then an appropriate error dialog
            will be displayed to the user - allowing them to retry etc.  
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.DeactivationException.#ctor">
            <summary>
            Construct an DeactivationException that does not represent a 
            connection error
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.DeactivationException.#ctor(System.String)">
            <summary>
            Construct an DeactivationException that does not represent a econnection error
            </summary>
            <param name="message">message to associate with the exception</param>
        </member>
        <member name="M:RedGate.Licensing.Client.DeactivationException.#ctor(System.String,System.Boolean)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="message">message to associate with the exception</param>
            <param name="connectionError">Whether the ActivationException represents a connection error</param>
        </member>
        <member name="M:RedGate.Licensing.Client.DeactivationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="message">message to associate with the exception</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:RedGate.Licensing.Client.DeactivationException.#ctor(System.String,System.Boolean,System.Exception)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="message">message to associate with the exception</param>
            <param name="connectionError">Whether the ActivationException represents a connection error</param>
            <param name="innerException">innerException</param>
        </member>
        <member name="M:RedGate.Licensing.Client.DeactivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Construct an ActivationException
            </summary>
            <param name="info">SerializationInfo</param>
            <param name="context">StreamingContext</param>
        </member>
        <member name="P:RedGate.Licensing.Client.DeactivationException.XmlError">
            <summary>
            The xml representation of the error for display in the UI
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.DeactivationException.ConnectionError">
            <summary>
            Get a bool representing whether this Exception represents a ConnectionError
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.ErrorWrapper">
            <summary>
            Because I sometimes wrap unknown strings into xml I need to ensure the unknown string will
            work.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ErrorWrapper.WrapMessageIntoXml(System.String,System.String)">
            <summary>
            Attempts to wrap a message into an xmlWrapper e.g. &lt;p&gt;{0}&lt;/p&gt;. Ensures
            the resulting xml can be loaded into an XmlDocument. If not the first line is used. If
            not "Unexpected failure" is used (really hope it doesn't come to that)
            </summary>
            <param name="xmlWrapper">The resource that's going to wrap around the text message</param>
            <param name="message">Arbitrary string that is going to wrapped</param>
            <returns>Wrapped whole message, first line of message or "Unexpected failure"</returns>
        </member>
        <member name="T:RedGate.Licensing.Client.ProductMiscmatchActivationException">
            <summary>
            Thrown by Confirm product - reponse was tried to be used with a different product
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ProductMiscmatchActivationException.#ctor">
            <summary>
            Construct an ActivationException that does not represent a 
            connection error
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.ActivationTagValue">
            <summary>
            Tag value for an activation
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.DisplayNameProvider">
            <summary>
            Default name mapping provider, can be overridden when we need something better
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.IDisplayNameProvider">
            <summary>
            Simpler interface based way of overriding the display name functionality
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IDisplayNameProvider.GetDisplayName(System.String)">
            <summary>
            Given a product name gives back the user visible name, e.g. "SQL Toolkit" vs. "SQL Comparison SDK"
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.DisplayNameProvider.GetDisplayName(System.String)">
            <summary>
            Given a product name gives back the user visible name, e.g. "SQL Toolkit" vs. "SQL Comparison SDK"
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.DisplayNameProvider.InitialiseSubstitutions">
            <summary>
            Returns the substitution list for product names. This could do with being updateable
            from the server.
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.DisplayNameProvider.ProductNameSubstitutions">
            <summary>
            Stores the visible product name substitutions
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.EmptyIdentificationProvider">
            <summary>
             Just a grab bag of identification items - contains no values to start with
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.IIdentificationProvider">
            <summary>
             Provides information for a request activation.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IIdentificationProvider.GetTags">
            <summary>
            Returns all the tags for an activation request
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IIdentificationProvider.ClearTag(System.String)">
            <summary>
            Removes the named identifier
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IIdentificationProvider.SetTag(System.String,RedGate.Licensing.Client.Providers.ActivationTagValue)">
            <summary>
            Set the named identifier to the value given. The elementName must be a valid simple xml element name (a-zA-Z0-9_).
            </summary>
            <return>true if the value was set ok, false otherwise (probably because elementName was not a valid xml element name)</return>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IIdentificationProvider.SetContext(RedGate.Licensing.Client.Licence,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            This is used to tell the provider about the license that the user has information about...
            Also the registry provider that was originally supplied
            </summary>
            <param name="licence">The licence being used</param>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.MachineIdentificationProvider">
            <summary>
             Provides information for a request activation that is based on the machine
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.EmailKey">
            <summary>
            Known string for email identifier
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.IdentifierKey">
            <summary>
            Known string for main identifier
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.OnInitializeKey">
            <summary>
            Known string for on initialize activation identifier
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.#ctor">
            <summary>
            Initialise to some simple default values for "email" and "identifier"
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.GetTags">
            <summary>
            Returns all the identifers for an activation request
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.ClearTag(System.String)">
            <summary>
            Removes the named identifier
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.MachineIdentificationProvider.SetTag(System.String,RedGate.Licensing.Client.Providers.ActivationTagValue)">
            <summary>
            Set the named identifier to the value given
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Strings">
            <summary>
            Due to double pass through smart assembly resources cannot
            be used in licensing client - sadly
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.VerifyDataFast">
            <summary>
            Modification to the behaviour of RSA.VerifyData to fix LC-232 to do with failed
            DNS lookups
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.VerifyDataFast.VerifyData(System.Security.Cryptography.RSACryptoServiceProvider,System.Byte[],System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            A fast version of <see cref="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])"/>, which doesn't suffer from LC-232
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.Activation">
            <summary>
            Use this class to connect to the red gate activation service
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.Activation">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.#ctor">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSerialCreated(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSerialCreatedAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSerialCreatedAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSupportExpiry(System.String)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSupportExpiryAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSupportExpiryAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetActivationsRemaining(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetActivationsRemainingAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetActivationsRemainingAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.ActivateLicence(System.String,System.String@,System.String@)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.ActivateLicenceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.ActivateLicenceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.DeactivateLicence(System.String,System.String@)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.DeactivateLicenceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.DeactivateLicenceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.ActivationServiceInternal.Activation.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSerialCreatedCompleted">
            <remarks/>
        </member>
        <member name="E:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetSupportExpiryCompleted">
            <remarks/>
        </member>
        <member name="E:RedGate.Licensing.Client.ActivationServiceInternal.Activation.GetActivationsRemainingCompleted">
            <remarks/>
        </member>
        <member name="E:RedGate.Licensing.Client.ActivationServiceInternal.Activation.ActivateLicenceCompleted">
            <remarks/>
        </member>
        <member name="E:RedGate.Licensing.Client.ActivationServiceInternal.Activation.DeactivateLicenceCompleted">
            <remarks/>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.Activation.GetWebRequest(System.Uri)">
            <summary>
            Creates a <see cref="T:System.Net.WebRequest"/> for the specified <paramref name="uri"/>.
            </summary>
            <returns>
            The <see cref="T:System.Net.WebRequest"/>.
            </returns>
            <param name="uri">The <see cref="T:System.Uri"/> to use when creating the <see cref="T:System.Net.WebRequest"/>. 
                            </param><exception cref="T:System.InvalidOperationException">The <paramref name="uri"/> parameter is null. 
                            </exception>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.DeactivationEngine">
            <summary>
            A class that makes a call to the activation web service for the purpose of deactivating a licence
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.DeactivationEngineBase">
            <summary>
            A class that makes a call to the activation web service for the purpose of deactivating a licence
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.ServiceEngineBase`1">
            <summary>
            A class that encapsulates calls to the activation web service
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Creates an abstract class for communication with the actvation web service
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.#ctor(RedGate.Licensing.Client.LicenceEngineBase)">
            <summary>
            Normal contructor for communication with the activation web service
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.PerformWebServiceCall">
            <summary>
            Performs the WebServiceCall() on the activation web service and calls ProcessResult() on the response
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.ThrowFailure(System.Boolean,System.String)">
            <summary>
            When a failure happens this throws the appropriate type of exception
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.WebServiceCall(RedGate.Licensing.Client.WebService.Activation,System.Boolean@,System.String@,System.String@)">
            <summary>
            The actual web service call routine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.ProcessResult(System.String)">
            <summary>
            Called after a successful WebServiceCall()
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.LicenceEngine">
            <summary>
            Licence engine to use for activation
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.ServiceUrl">
            <summary>
            Get the web service URL
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.ServiceTimeout">
            <summary>
            Get the web service timeout in milliseconds
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.Session">
            <summary>
            Per session activations for trial extensions
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ServiceEngineBase`1.RegistryProvider">
            <summary>
            Store of Registry provider
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence)">
            <summary>
            Convenience override to deactivate all licences for given primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Convenience override to deactivate all licences for given primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,System.Collections.Generic.IList{RedGate.Licensing.Client.Licence})">
            <summary>
            Create an deactivation provider for the set of licences using the given LicenceEngine.
            If your product uses shared serial numbers you should either use GetAllLicences to retrieve
            the list of activated product - or easier use the override to pass in a primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,System.Collections.Generic.IList{RedGate.Licensing.Client.Licence},RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Create an deactivation provider for the set of licences using the given LicenceEngine.
            If your product uses shared serial numbers you should either use GetAllLicences to retrieve
            the list of activated product - or easier use the override to pass in a primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.CheckLicences(System.Collections.Generic.IList{RedGate.Licensing.Client.Licence})">
            <summary>
            Check that the list of licenses is valid for a deactivation request
            </summary>
            <param name="licences"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.DeactivateFromWebService">
            <summary>
            Deactivates the licences from the webservice
            </summary>
            <exception cref="T:RedGate.Licensing.Client.ActivationException">In the event of activation failure</exception>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.GetDeactivationRequest">
            <summary>
            Creates a deactivation request call
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.ProcessResult(System.String)">
            <summary>
            Called after a successful WebServiceCall(). Nothing in response at all if there is an error it happens in DeactivateFromWebService()
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngineBase.ThrowFailure(System.Boolean,System.String)">
            <summary>
            When a failure happens this throws the appropriate type of exception
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.DeactivationEngineBase.Licences">
            <summary>
            Licences to be activated(only 1), or deactivated(allow more than 1)
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence)">
            <summary>
            Convenience override to deactivate all licences for given primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Convenience override to deactivate all licences for given primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,System.Collections.Generic.IList{RedGate.Licensing.Client.Licence})">
            <summary>
            Create an deactivation provider for the set of licences using the given LicenceEngine.
            If your product uses shared serial numbers you should either use GetAllLicences to retrieve
            the list of activated product - or easier use the override to pass in a primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,System.Collections.Generic.IList{RedGate.Licensing.Client.Licence},RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Create an deactivation provider for the set of licences using the given LicenceEngine.
            If your product uses shared serial numbers you should either use GetAllLicences to retrieve
            the list of activated product - or easier use the override to pass in a primary licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.DeactivationEngine.WebServiceCall(RedGate.Licensing.Client.WebService.Activation,System.Boolean@,System.String@,System.String@)">
            <summary>
            The actual web service call routine
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.ActivationEngineBase">
            <summary>
            The root of all activation engines, via proxy, etc.
            NOTE: if you specify more licences for the activation the server will pick the
            actually purchased licence and activate that one. The client will get the activated product(s)' licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence[])">
            <summary>
            Create an activation provider for the given Licences using the given LicenceEngine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Create an activation provider for the given Licence using the given LicenceEngine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Providers.IRegistryProvider,RedGate.Licensing.Client.Licence[])">
            <summary>
            Create an activation provider for the given Licences using the given LicenceEngine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.ThrowFailure(System.Boolean,System.String)">
            <summary>
            When a failure happens this throws the appropriate type of exception
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.ActivateFromWebService(System.String)">
            <summary>
            Activate the licence from the webservice
            </summary>
            <exception cref="T:RedGate.Licensing.Client.ActivationException">In the event of activation failure</exception>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.ProcessResult(System.String)">
            <summary>
            After a successful web service call this routine
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.ActivateLicence(System.String,System.String)">
            <summary>
            Activate the licence from the given response xml or even "i need more time"
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.GetActivationRequest(System.String)">
            <summary>
            Get the activation request string for the licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngineBase.GetIdentifiers(System.Collections.Generic.IEnumerable{RedGate.Licensing.Client.Providers.IIdentificationProvider})">
            <summary>
            Gets the portion of the activation request that uses the identification providers
            </summary>
            <returns>a fragment of xml or empty string</returns>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ActivationEngineBase.Licences">
            <summary>
            The licences
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ActivationEngineBase.IdentificationProviders">
            <summary>
            The identification providers
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ActivationEngineBase.SerialNumber">
            <summary>
            The serial number being activated
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.ActivationEngine">
            <summary>
            The default mechanism for activation licenses
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence[])">
            <summary>
            General constructor for a direct activation engine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence,RedGate.Licensing.Client.Providers.IIdentificationProvider)">
            <summary>
            General constructor for a direct activation engine - allowing an arbitrary identification provider - this may affect functionality
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence[],RedGate.Licensing.Client.Providers.IIdentificationProvider)">
            <summary>
            General constructor for a direct activation engine - allowing an arbitrary identification provider - this may affect functionality
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Licence,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Create an activation provider for the given Licence using the given LicenceEngine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.#ctor(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Providers.IRegistryProvider,RedGate.Licensing.Client.Licence[])">
            <summary>
            Create an activation provider for the given Licences using the given LicenceEngine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.SetIdentificationProvider(RedGate.Licensing.Client.Providers.IIdentificationProvider)">
            <summary>
            TODO: write this
            </summary>
            <param name="identificationProvider"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.WebService.ActivationEngine.WebServiceCall(RedGate.Licensing.Client.WebService.Activation,System.Boolean@,System.String@,System.String@)">
            <summary>
            The actual web service call routine
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.ActivationEngine.IdentificationProvider">
            <summary>
            By default Activation Engine makes use of a machine identification provider
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Consts">
            <summary>
            Constant holder
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.DefaultTrialLength">
            <summary>
            The default trial length for a tampered licence
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.MaxTrialInDays">
            <summary>
            Maximum length of a trial
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.DefaultLocation">
            <summary>
            Default binary location in registry
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.NeedMoreTime">
            <summary>
            String for short trial extension
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.ActivationUrlRegistryName">
            <summary>
            Name of the value in the registry for the activation url
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.PublicKeyOverrideRegistryName">
            <summary>
            Name of the value in the registry for the Public key override
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.ActivationUrlDefault">
            <summary>
            Default activation url
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.ActivationTimeoutRegistryName">
            <summary>
            Name of the value in the registyr for the activation url
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.ActivationTimeoutDefault">
            <summary>
            Default activation timeout (ms)
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.LicenseFileExtension">
            <summary>
            The extension of the filename for this version of licensing
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.Consts.RequestVersion">
            <summary>
            The activation/response version
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.WebService.IParentWindowProperty">
            <summary>
            Interface that described a class that will accept a parent window
            setter. Used for parent windows when showing UI.
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.WebService.IParentWindowProperty.ParentWindow">
            <summary>
            IntPtr of the parent window
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.DateTimeProvider">
            <summary>
            Licensing dependency on the system clock
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.IDateTimeProvider">
            <summary>
            Licensing dependency on the system clock
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.IDateTimeProvider.UtcNow">
            <summary>
            Returns the utc now time of the local machine
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.DateTimeProvider.UtcNow">
            <summary>
            Returns the utc now time of the local machine
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.FileSystemProvider">
            <summary>
            Conctrete implementation of a real file system provider
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.IFileSystemProvider">
            <summary>
            Allow file system persistence to be modified
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.GetFilePath(RedGate.Licensing.Client.Licence,System.String)">
            <summary>        
            Gets the filename for the given licence     
            </summary>
            <param name="licence"></param>
            <param name="persistMachineHash"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.InitializeOnInstall(System.String)">
            <summary>
            Performs all setup when a licence is fist initialised, also run before
            file peristence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.PersistFile(System.String,System.String)">
            <summary>
            Stores a file into the filesystem
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.GetFile(System.String)">
            <summary>
            Retrieves a file from the filesystem
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.FileExists(System.String)">
            <summary>
            True if the file exists, false otherwise
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.DeleteFile(System.String)">
            <summary>
            Deletes a file from the filesystem, needed for deactivation
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IFileSystemProvider.GetFiles(System.String,System.String)">
            <summary>
            Gets all the files in the given folder in the file system with the given extension
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.IFileSystemProvider.LicencesDirectory">
            <summary>
            The directory where licenses are stored
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.InitializeOnInstall(System.String)">
            <summary>
            Performs all setup when a licence is fist initialised, also run before
            file storage
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.SetDirectoryPermissions(System.String)">
            <summary>
            Simply set the directories access control to allow world access
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.PersistFile(System.String,System.String)">
            <summary>
            Stores a file into the filesystem
            </summary>
            <param name="filePath"></param>
            <param name="contents"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.GetFile(System.String)">
            <summary>
            Retrieves a file from the filesystem
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.GetFiles(System.String,System.String)">
            <summary>
            Gets all the files in the given folder in the file system
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.FileExists(System.String)">
            <summary>
            True if the file exists, false otherwise
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.FileSystemProvider.DeleteFile(System.String)">
            <summary>
            Deletes a file from the filesystem, needed for deactivation
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.FileSystemProvider.LicencesDirectory">
            <summary>
            The directory where all licence files are stored
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.IMachineHashProvider">
            <summary>
            Licensing dependency on machine hash
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IMachineHashProvider.GetMachineHash">
            <summary>
            Returns the machine hash of the local machine
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.IRegistryProvider">
            <summary>
            Licensing dependency on the registry for licence persistence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.GetValue(Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Gets the value of the given key
            </summary>
            <returns>the value of the key or null if not found</returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.ExistsKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns true if and only if the key already exists.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.CreateKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns false if the key already exists, true if the key was created sucessfully
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.SetPermission(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Allow full permissions on the given registry location
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,System.String,System.Byte[])">
            <summary>
            Store a binary value into the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,System.String,System.String)">
            <summary>
            Store a string value into the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,System.String,System.Int32)">
            <summary>
            Store an integer value into the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.DeleteKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Deletes a key and all subkeys - this of course is quite dangerous
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.GetKeys(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns all key names in the given location in the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.GetKeysSafe(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns all key names in the given location in the registry
            This call doesn't try to create the key if doesn't exist (while GetKeys does)
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.GetValues(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns all the value names in the given key
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.DeleteValue(Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Deletes a value
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.IRegistryProvider.UseWow6432Node(Microsoft.Win32.RegistryHive)">
            <summary>
            For the given hive - should wow6432node be used. This is generally only
            for HKCU and HKLM when the machine 64 bit and the process is also 64 bit
            </summary>
            <param name="hive"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.Licensing.Client.Licence">
            <summary>
            This class represents a licence and contains a lot of code for starting
            trials, ensure licences haven't been tampered, and provides serialization
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.#ctor">
            <summary>
            Simple initialiser for empty string instead of nulls
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.CreateNewTrialLicence(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.DateTime,System.Int32,System.String)">
            <summary>
            Creates a simple new trial licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.CreateTamperedLicence(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.DateTime,System.String)">
            <summary>
            Creates a simple tampered licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.CreateNewTimebombLicence(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.DateTime,System.DateTime,System.String)">
            <summary>
            Creates a simple new time bomb licence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. 
                            </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. 
                            </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. 
                            </exception>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.GetEncryptedData(System.String)">
            <summary>
            Gets the encrypted data of this licence for 
            </summary>
            <param name="machineHash"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.#ctor(System.Byte[],System.String,System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Contruct a licence from the binary data, also perform checks
            </summary>
            <param name="encryptedData"></param>
            <param name="machineHash"></param>
            <param name="utcNow"></param>
            <param name="trialExtensionDaysOverride">set this if you want to set a different trial extension length from the original trial length</param>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Load(System.Byte[],System.String,System.DateTime)">
            <summary>
            Loads a licence from the given binary - returns null on load failure
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Load(System.Byte[],System.String,System.DateTime,System.Nullable{System.Int32})">
            <summary>
            Loads a licence from the given binary - returns null on load failure
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Encrypt(System.Byte[])">
            <summary>
            Retrieve the secure binary representation of the licence from its insecure binary representation
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Decrypt(System.Byte[])">
            <summary>
            Retrieve the binary representation of the licence from the secured version
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.ExtendTrial(System.DateTime,System.Boolean)">
            <summary>
            Extend the trial, will deactivate activated licences
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Activate(System.DateTime,System.String,System.String,System.Int32,System.String)">
            <summary>
            Sets the licence object to be activated
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Deactivate(System.DateTime)">
            <summary>
            Deactivates the licence by removing the response xml and clearing all the activated
            licence settings so that when it is re-persisted it will be deactivated
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Tamper(System.DateTime)">
            <summary>
            Sets the licence into tampered mode
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Expire(System.DateTime)">
            <summary>
            Expires the licence by setting the datetime to be now
            </summary>
            <param name="utcNow"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:RedGate.Licensing.Client.Licence.SetupProductName(System.Int32,System.String,System.String)">
            <summary>
            Sets up ProductName and DisplayName in a safe way: if the productName or displayName empty it will try to
            fill in these fields using the productCode
            </summary>
            <param name="productCode"></param>
            <param name="productName"></param>
            <param name="displayName"></param>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.SerialNumber">
            <summary>
            Serial Number of an activated licence, empty string if not activated
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.Activated">
            <summary>
            True if the licence has been activated, false otherwise
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.ProductCode">
            <summary>
            Licensing Server product code
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.ProductName">
            <summary>
            Internal product name of licence
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.DisplayName">
            <summary>
            User visible product name of licence
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.Edition">
            <summary>
            Edition of activated licence, empty string if not activated
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.MajorVersion">
            <summary>
            Major version of licence
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.MinorVersion">
            <summary>
            Minor version of licence, this should always be 0
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.UsersPurchased">
            <summary>
            Number of users purchased in licence for activated licences, 0 otherwise
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.FullDisplayName">
            <summary>
            Gets the full display name for the licence including version and edition
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.Status">
            <summary>
            Status of licence, you should use StatusString instead of ToString() due to enum being obfuscated
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.StatusString">
            <summary>
            String of the status of licence
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.TrialExtended">
            <summary>
            Has this trial been extended yet
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.TrialLength">
            <summary>
            If the trial is not a timebomb this contains the default trial length starting from first use, if
            this is a timebomb the value is 0
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.DateToExpire">
            <summary>
            Date that the trial will expire, stored in utc time
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.DateLastUsed">
            <summary>
            Date that the licence was last used, used for tamper protection, stored in utc time
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.DateInstalled">
            <summary>
            Date that the licence was initialised, trial duration may be based on this date if not a time bomb, stored in utc time
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.DateFirstUsed">
            <summary>
            Date that the licence was first used, used for tamper protection, stored in utc time
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.LocalMachineHash">
            <summary>
            The machine hash on which the licence is stored
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.Location">
            <summary>
            The location value name of the licence where it's stored in the registry e.g. Blob300
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Licence.ResponseXml">
            <summary>
            For activated licences this should always contain the text of the response xml
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.LicenceEngine">
            <summary>
            Main class for persisting and retrieving licences
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.LicenceEngineBase">
            <summary>
            Abstract base class for persistence of licences
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.#ctor(RedGate.Licensing.Client.Providers.IDateTimeProvider,RedGate.Licensing.Client.Providers.IMachineHashProvider,RedGate.Licensing.Client.Providers.IDisplayNameProvider)">
            <summary>
            Constructs a base implementation of the licence persistence engine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.OverridePublicKey(System.String)">
            <summary>
            Override the public key used for checking activated licences
            </summary>
            <param name="overrideKey"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.Int32,System.String,System.Int32)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.String,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetLicence(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Get the root licence for the given product with overriding the maximum days for a trial extension.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetRootLicence(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Get the activated licences for the given product. 
            If a licence exists and does not match, a tampered licence is created and persisted.
            But if no licences exist, a tampered licence is NOT created or persisted.
            Only activated licences are returned, any tampered licences are not returned.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.PersistLicence(RedGate.Licensing.Client.Licence)">
            <summary>
            Store the licence in a way that is consistent
            - Activated Licences always contain ResponseXml
            - Activated Licences activated as part of a shared serial number have an empty Location,
                the ResponseXml is valid for any subsequent call to GetLicence() regardless of Location
            - If a Licence does not contain a ResponseXml then any stored ResponseXml for the licence must be cleared
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">Unable to persist licence</exception>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetAllLicences(System.Predicate{RedGate.Licensing.Client.Licence})">
            <summary>
            Returns all the licenses stored for all products, no persistence is done and many validation checks
            are not performed, Not all licences returned will have a Location set as they may be shared serial number
            licences that have not been requested by GetLicence() yet and so only the ResponseXml is stored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.InitializeTrialOnInstall(System.Int32,System.String,System.Int32,System.Guid)">
            <summary>
            Convenience override for initializing a trial on install
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.InitializeTrialOnInstall(System.Int32,System.String,System.Int32,System.Guid,System.String)">
            <summary>
            Convenience override for initializing a trial on install
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.InitializeTrialOnInstall(System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.Int32,System.String)">
            <summary>
            Initialize a trial on install, if this fails it fails silently
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.InitializeTimebombOnInstall(System.Int32,System.String,System.Int32,System.Guid,System.DateTime,System.String)">
            <summary>
            Convenience override for initializing a time bomb on install
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.InitializeTimebombOnInstall(System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.DateTime,System.String)">
            <summary>
            Initialize a time bomb licence on install, this has a fixed expiry date
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.InitializeOnInstall(System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.String,RedGate.Licensing.Client.CreateLicence)">
            <summary>
            Performs major initialisation and stores the created licence on demand if successful
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.IsValidSerialNumber(RedGate.Licensing.Client.Licence,System.String)">
            <summary>
            Checks for the serial number being a valid red gate serial number, old or new style
            </summary>
            <param name="licence">if a licence is activated then "i need more time" is not a valid serial number</param>
            <param name="serialNumber">serial number to be checked</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngineBase.GetDefaultSerialNumber(RedGate.Licensing.Client.Licence)">
            <summary>
            Given a non-activated licence this will return the serial number to use
            if it has previously been activated
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngineBase.DateTimeProvider">
            <summary>
            Date time provider for the machine
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngineBase.MachineHashProvider">
            <summary>
            Machine hash calculator for the machine
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngineBase.DisplayNameProvider">
            <summary>
            Provides the mapping of display names
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngineBase.PublicKey">
            <summary>
            The public key to be used when checking an activated licence
            Note: This can be overriden for customers with customized licensing server
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngineBase.RedGatePublicKey">
            <summary>
            Red Gate public key, used for checking contents from Red Gate
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.#ctor">
            <summary>
            Creates a real licence engine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.#ctor(RedGate.Licensing.Client.Providers.IRegistryProvider,RedGate.Licensing.Client.Providers.IFileSystemProvider,RedGate.Licensing.Client.Providers.IDateTimeProvider,RedGate.Licensing.Client.Providers.IMachineHashProvider)">
            <summary>
            Contructs a new licence engine with the given depencies - mainly for testing I imagine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.#ctor(RedGate.Licensing.Client.Providers.IRegistryProvider,RedGate.Licensing.Client.Providers.IFileSystemProvider,RedGate.Licensing.Client.Providers.IDateTimeProvider,RedGate.Licensing.Client.Providers.IMachineHashProvider,RedGate.Licensing.Client.Providers.IDisplayNameProvider)">
            <summary>
            Contructs a new licence engine with the given depencies - mainly for testing I imagine
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Get the activated licences for the given product. 
            If a licence exists and does not match, a tampered licence is created and persisted.
            But if no licences exist, a tampered licence is NOT created or persisted.
            Only activated licences are returned, any tampered licences are not returned.
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">Unable to persist licence</exception>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.GetRootLicence(System.String,System.Int32,System.String,System.Int32,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Get the root licence for the given product.
            If the licence does not match, or does not exist, a tampered licence is created and persisted.
            The "root licence" is the licence that should be checked for the trial.
            - If the product only activates one serial number, an activated licence can be persisted in the place of the root licence.
              In this case <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> can be ignored.
            - If the product can activate multiple serial numbers (e.g. to pool purchased users) then activated licences must be persisted separately.
              To retrieve the activated licences, call <see cref="M:RedGate.Licensing.Client.LicenceEngineBase.GetActivatedLicences(System.Int32,System.String,System.Int32,System.Int32,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.GetPersistLocalHash(System.String)">
            <summary>
            Returns null if the machineHash is similar to the local machine hash, otherwise returns the machineHash
            </summary>
            <param name="machineHash"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.PersistLicence(RedGate.Licensing.Client.Licence)">
            <summary>
            Store the licence in a way that is consistent
            - Activated Licences always contain ResponseXml
            - Activated Licences activated as part of a shared serial number have an empty Location,
                the ResponseXml is valid for any subsequent call to GetLicence() regardless of Location
            - If a Licence does not contain a ResponseXml then any stored ResponseXml for the licence must be cleared
            </summary>
            <exception cref="T:System.UnauthorizedAccessException">Unable to persist licence</exception>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.GetAllLicences(System.Predicate{RedGate.Licensing.Client.Licence})">
            <summary>
            Returns all the licenses stored for all products, no persistence is done and many validation checks
            are not performed, Not all licences returned will have a Location set as they may be shared serial number
            licences that have not been requested by GetLicence() yet and so only the ResponseXml is stored.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.ProductNameFromProductCode(System.Int32)">
            <summary>
            Gets product name from product code. Useful when the license itself doesn't state the product name
            </summary>
            <param name="productCode"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.InitializeOnInstall(System.Int32,System.String,System.Int32,System.Int32,System.Guid,System.String,RedGate.Licensing.Client.CreateLicence)">
            <summary>
            Performs major initialisation and stores the created licence on demand if successful
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.LicenceEngine.GetDefaultSerialNumber(RedGate.Licensing.Client.Licence)">
            <summary>
            Returns serial number of current license if it exists, otherwise
            returns serial number of most recent version found in registry.
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngine.RegistryProvider">
            <summary>
            Used for persistence of trial licences and retrieved licences, not necessarily activated ones
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.LicenceEngine.FileSystemProvider">
            <summary>
            Used for persistence of activated licences
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.MachineHashProvider">
            <summary>
            Licensing dependency on machine hash
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.MachineHashProvider.GetMachineHash">
            <summary>
            Returns the machine hash of the local machine
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.MachineHashFunctions">
            <summary>
            Static functions used for machine hashes
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.MachineHashFunctions.CreateMachineHash(System.String,System.String,System.String)">
            <summary>
            Creates a machine hash from the given component system information
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.MachineHashFunctions.CreateMachineHash(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a machine hash from the given component system information crc values, used for testing
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.MachineHashFunctions.HashesAreSimilar(System.String,System.String)">
            <summary>
            Compares two machine hashs and returns false only if all three first parts are different
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.MachineHashFunctions.IsValidMachineHash(System.String)">
            <summary>
            Just checks the machine hash is valid
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.MachineHashFunctions.CRC16(System.String)">
            <summary>
            Generate a CRC16 for the given text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:RedGate.Licensing.Client.RegistryLocations">
            <summary>
            Class to encapsulate the registry key calculations, you shouldn't attempt to change any of this behaviour
            as other problems in the same bundle rely on these locations
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.RegistryLocations.SerialNumberName">
            <summary>
            The name of the registry value for a serial number
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetHiddenKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.String,System.String,System.Int32)">
            <summary>
            Gets the location of the binary licence for the specific product
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetHiddenKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the location of the binary licence for the specific product
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetHiddenKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Gets the location where all the products are in the registry for licence enumeration
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetRedGateUpdateKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.String)">
            <summary>
            Gets the location of where CheckforUpdates stores it stuff in the registry...
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetSerialKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.String,System.String,System.Int32)">
            <summary>
            Gets the serial number location for the specific product
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetSerialKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the serial number location for the specific product
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetProductKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.String)">
            <summary>
            Gets the serial number location for the specific product
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetConfigKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider)">
            <summary>
            Return the registry path for configuration and serial numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.RegistryLocations.GetGuidKeyName(Microsoft.Win32.RegistryHive,RedGate.Licensing.Client.Providers.IRegistryProvider,System.Guid)">
            <summary>
            Gets the registry location of the initialisation guid
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.RegistryProvider">
            <summary>
            Licensing dependency on the registry for licence persistence
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.#ctor">
            <summary>
            Creates a registry provider for the local machine.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a registry provider for a given machine. If the remote machine is
            x64 you should pass in true for remoteX64, false otherwise.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.UseWow6432Node(Microsoft.Win32.RegistryHive)">
            <summary>
            Returns
            </summary>
            <param name="hive"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.GetValue(Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Gets the value of the given key
            </summary>
            <returns>the value of the key or null if not found</returns>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.ExistsKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns true if and only if the key already exists.
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.CreateKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns false if the key already exists, true if the key was created sucessfully
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.SetPermission(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Allow full permissions on the given registry location
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,System.String,System.Byte[])">
            <summary>
            Store a value into the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,RedGate.Licensing.Client.Providers.RegistryProvider.SetValueActual)">
            <summary>
            SetValue via a delegate to try to prevent code repitition
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,System.String,System.String)">
            <summary>
            Store a string value into the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.SetValue(Microsoft.Win32.RegistryHive,System.String,System.String,System.Int32)">
            <summary>
            Store an integer value into the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.DeleteKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Deletes a key and all subkeys - this of course is quite dangerous
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.GetKeys(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns all key names in the given location in the registry
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.GetKeysSafe(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns all key names in the given location in the registry
            This call doesn't try to create the key if doesn't exist (while GetKeys does)
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.GetValues(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            Returns all the value names in the given key
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.DeleteValue(Microsoft.Win32.RegistryHive,System.String,System.String)">
            <summary>
            Deletes a value
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.Providers.RegistryProvider.GetHive(Microsoft.Win32.RegistryHive)">
            <summary>
            Returns a registry area for a given hive - this can be overridden for e.g. Reflector so it
            can store data in HKCU instead of HKCR and HKLM
            </summary>
            <param name="hive"></param>
            <returns></returns>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.RegistryProvider.Is32BitProcess">
            <summary>
            True if the process in 32 bit only 
            </summary>
        </member>
        <member name="P:RedGate.Licensing.Client.Providers.RegistryProvider.Is64BitMachine">
            <summary>
            True if the machine is x64, false otherwise
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.Providers.RegistryProvider.SetValueActual">
            <summary>
            Delegate used to set a value into the registry
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.ResponseFunctions">
            <summary>
            Activation responses are always the same - this allows the system to interpet them
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.ConfirmMachineHash(System.String,System.Xml.XmlNode)">
            <summary>
            Given the data section of the activation response this will ensure that the machine hash
            match that requested
            </summary>
            <returns>the activated machine hash in the response</returns>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.InterpretResponse(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Providers.IDisplayNameProvider,System.String,System.DateTime,System.String,System.String)">
            <summary>
            Given an activation in response only will return all licences contained therein, for deactivation of
            un-used products
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.InterpretFileName(System.String,System.String@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Takes the full file path of a potential licence file and splits it up into parts
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.InterpretResponse(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Providers.IDisplayNameProvider,System.String,System.DateTime,RedGate.Licensing.Client.Licence,System.String)">
            <summary>
            Given an activation response (normally from a file for this override) this will perform the driving of all activation
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.PickLicenceForTrialExtension(System.Collections.Generic.IList{RedGate.Licensing.Client.Licence},System.Int32,System.Int32,System.Int32)">
            <summary>
            Picks the most likely current trial licence for product
            </summary>
            <param name="allTrialLicences"></param>
            <param name="productCode"></param>
            <param name="majorVersion"></param>
            <param name="minorVersion"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.InterpretResponse(RedGate.Licensing.Client.LicenceEngineBase,RedGate.Licensing.Client.Providers.IDisplayNameProvider,System.String,System.DateTime,RedGate.Licensing.Client.Licence,System.String,System.String,System.String)">
            <summary>
            Given an activation response this will perform the driving of all activation.
            The response will be cleaned removing spurious layout for v2 client activation
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.ConfirmProduct(RedGate.Licensing.Client.Licence,System.Xml.XmlNode)">
            <summary>
            Search the response to ensure the licence is present in the response
            </summary>
            <param name="licence"></param>
            <param name="responseData"></param>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.GetText(System.Xml.XmlNode,System.String)">
            <summary>
            Gets the InnerText of the given xml node, returns defaultValue if node is null
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.GetInt(System.Xml.XmlNode,System.Int32)">
            <summary>
            Gets the InnerText as an integer of the given node, returns defaultValue if node is null or not an integer
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.ConfirmPublicKeyOverrideSignature(System.Xml.XmlNode,System.String,System.String@)">
            <summary>
            Given the public key override request, confirms that it has been properly signed and not modified.
            </summary>
            <param name="document"></param>
            <param name="publicKey"></param>
            <param name="cleanedXml"></param>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.ConfirmResponseSignature(System.String,System.String)">
            <summary>
            Given the activation response, confirms that it has been properly signed and not modified
            </summary>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.ConfirmResponseSignature(System.String,System.String,System.String@)">
            <summary>
            Given the activation response, confirms that it has been properly signed and not modified
            The cleanedResponseXml will clear our any spurious formatting that would prevent a v2 client
            understanding the response - this is what is persisted not the raw response
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedGate.Licensing.Client.ResponseFunctions.ConfirmDataSignature(System.Xml.XmlNode,System.String,System.String,System.String@)">
            <summary>
            Given the activation response, confirms that it has been properly signed and not modified
            The cleanedResponseXml will clear our any spurious formatting that would prevent a v2 client
            understanding the response - this is what is persisted not the raw response
            </summary>
            <returns></returns>
        </member>
        <member name="T:RedGate.Licensing.Client.ResponseFunctions.ResponseValue">
            <summary>
            Given an activation response you can read out specific named parts
            The response will be cleaned removing spurious layout for v2 client activation        
            You should only do this after InterpretResponse
            </summary>
            
        </member>
        <member name="T:RedGate.Licensing.Client.TrialStatus">
            <summary>
            The possible states of the Trial
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.TrialStatus.InTrial">
            <summary>
            The license is still in its trial period
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.TrialStatus.Expired">
            <summary>
            The trial license period has expired
            </summary>
        </member>
        <member name="F:RedGate.Licensing.Client.TrialStatus.Tampered">
            <summary>
            The trial license has been tampered with
            </summary>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.GetSerialCreatedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.GetSerialCreatedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.GetSerialCreatedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.GetSupportExpiryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.GetSupportExpiryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.GetSupportExpiryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.GetActivationsRemainingCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.GetActivationsRemainingCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.GetActivationsRemainingCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.ActivateLicenceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.ActivateLicenceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.ActivateLicenceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.ActivateLicenceCompletedEventArgs.activationResponse">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.ActivateLicenceCompletedEventArgs.errorMessage">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.DeactivateLicenceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:RedGate.Licensing.Client.ActivationServiceInternal.DeactivateLicenceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.DeactivateLicenceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="P:RedGate.Licensing.Client.ActivationServiceInternal.DeactivateLicenceCompletedEventArgs.errorMessage">
            <remarks/>
        </member>
    </members>
</doc>
